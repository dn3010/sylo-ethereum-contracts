export const Directory = [
  { inputs: [], name: 'ContractNameCannotBeEmpty', type: 'error' },
  { inputs: [], name: 'InterfaceIdCannotBeZeroBytes', type: 'error' },
  { inputs: [], name: 'ManagerCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'NoJoiningStakeToJoinEpoch', type: 'error' },
  { inputs: [], name: 'NoStakeToJoinEpoch', type: 'error' },
  { inputs: [], name: 'OnlyManagers', type: 'error' },
  { inputs: [], name: 'StakeeAlreadyJoinedEpoch', type: 'error' },
  { inputs: [], name: 'StakeeCannotBeZeroAddress', type: 'error' },
  {
    inputs: [{ internalType: 'string', name: 'name', type: 'string' }],
    name: 'TargetContractCannotBeZeroAddress',
    type: 'error',
  },
  {
    inputs: [
      { internalType: 'string', name: 'name', type: 'string' },
      { internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' },
    ],
    name: 'TargetNotSupportInterface',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'currentDirectory',
        type: 'uint256',
      },
    ],
    name: 'CurrentDirectoryUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint8', name: 'version', type: 'uint8' },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferStarted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: '_rewardsManager',
    outputs: [
      { internalType: 'contract RewardsManager', name: '', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_stakingManager',
    outputs: [
      { internalType: 'contract StakingManager', name: '', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'manager', type: 'address' }],
    name: 'addManager',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'currentDirectory',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    name: 'directories',
    outputs: [{ internalType: 'uint256', name: 'totalStake', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'epochId', type: 'uint256' }],
    name: 'getEntries',
    outputs: [
      { internalType: 'address[]', name: '', type: 'address[]' },
      { internalType: 'uint256[]', name: '', type: 'uint256[]' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'epochId', type: 'uint256' }],
    name: 'getTotalStake',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'epochId', type: 'uint256' },
      { internalType: 'address', name: 'stakee', type: 'address' },
    ],
    name: 'getTotalStakeForStakee',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract StakingManager',
        name: 'stakingManager',
        type: 'address',
      },
      {
        internalType: 'contract RewardsManager',
        name: 'rewardsManager',
        type: 'address',
      },
    ],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'stakee', type: 'address' },
      { internalType: 'uint256', name: 'seekerId', type: 'uint256' },
    ],
    name: 'joinNextDirectory',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '', type: 'address' }],
    name: 'managers',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'manager', type: 'address' }],
    name: 'removeManager',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint128', name: 'point', type: 'uint128' }],
    name: 'scan',
    outputs: [{ internalType: 'address', name: 'stakee', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint128', name: 'point', type: 'uint128' },
      { internalType: 'uint256', name: 'epochId', type: 'uint256' },
    ],
    name: 'scanWithEpochId',
    outputs: [{ internalType: 'address', name: 'stakee', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'epochId', type: 'uint256' }],
    name: 'setCurrentDirectory',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;
export const EpochsManager = [
  { inputs: [], name: 'ContractNameCannotBeEmpty', type: 'error' },
  { inputs: [], name: 'DirectoryCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'EpochDurationCannotBeZero', type: 'error' },
  {
    inputs: [{ internalType: 'uint256', name: 'epochId', type: 'uint256' }],
    name: 'EpochHasNotEnded',
    type: 'error',
  },
  { inputs: [], name: 'InitialEpochCannotBeZero', type: 'error' },
  {
    inputs: [
      { internalType: 'uint256', name: 'expectedBlock', type: 'uint256' },
      { internalType: 'uint256', name: 'currentBlock', type: 'uint256' },
    ],
    name: 'InitialEpochNotYetReady',
    type: 'error',
  },
  { inputs: [], name: 'InterfaceIdCannotBeZeroBytes', type: 'error' },
  { inputs: [], name: 'RegistriesCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'RootSeekerCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'SeekerAccountCannotBeZeroAddress', type: 'error' },
  {
    inputs: [
      { internalType: 'uint256', name: 'epochId', type: 'uint256' },
      { internalType: 'uint256', name: 'seekerId', type: 'uint256' },
    ],
    name: 'SeekerAlreadyJoinedEpoch',
    type: 'error',
  },
  { inputs: [], name: 'SeekerOwnerMismatch', type: 'error' },
  {
    inputs: [{ internalType: 'string', name: 'name', type: 'string' }],
    name: 'TargetContractCannotBeZeroAddress',
    type: 'error',
  },
  {
    inputs: [
      { internalType: 'string', name: 'name', type: 'string' },
      { internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' },
    ],
    name: 'TargetNotSupportInterface',
    type: 'error',
  },
  { inputs: [], name: 'TicketingParametersCannotBeZeroAddress', type: 'error' },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'epochDuration',
        type: 'uint256',
      },
    ],
    name: 'EpochDurationUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'epochId',
        type: 'uint256',
      },
      { indexed: true, internalType: 'address', name: 'node', type: 'address' },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'seekerId',
        type: 'uint256',
      },
    ],
    name: 'EpochJoined',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'initialEpoch',
        type: 'uint256',
      },
    ],
    name: 'InitialEpochUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint8', name: 'version', type: 'uint8' },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'epochId',
        type: 'uint256',
      },
    ],
    name: 'NewEpoch',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferStarted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: '_directory',
    outputs: [
      { internalType: 'contract Directory', name: '', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_registries',
    outputs: [
      { internalType: 'contract Registries', name: '', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_rootSeekers',
    outputs: [{ internalType: 'contract IERC721', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_ticketingParameters',
    outputs: [
      {
        internalType: 'contract TicketingParameters',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: '', type: 'uint256' },
      { internalType: 'uint256', name: '', type: 'uint256' },
    ],
    name: 'activeSeekers',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'currentIteration',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'epochDuration',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    name: 'epochs',
    outputs: [
      { internalType: 'uint256', name: 'startBlock', type: 'uint256' },
      { internalType: 'uint256', name: 'duration', type: 'uint256' },
      { internalType: 'uint256', name: 'endBlock', type: 'uint256' },
      {
        internalType: 'uint32',
        name: 'defaultPayoutPercentage',
        type: 'uint32',
      },
      { internalType: 'uint32', name: 'decayRate', type: 'uint32' },
      { internalType: 'uint256', name: 'faceValue', type: 'uint256' },
      { internalType: 'uint128', name: 'baseLiveWinProb', type: 'uint128' },
      { internalType: 'uint128', name: 'expiredWinProb', type: 'uint128' },
      { internalType: 'uint256', name: 'ticketDuration', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCurrentActiveEpoch',
    outputs: [
      { internalType: 'uint256', name: '', type: 'uint256' },
      {
        components: [
          { internalType: 'uint256', name: 'startBlock', type: 'uint256' },
          { internalType: 'uint256', name: 'duration', type: 'uint256' },
          { internalType: 'uint256', name: 'endBlock', type: 'uint256' },
          {
            internalType: 'uint32',
            name: 'defaultPayoutPercentage',
            type: 'uint32',
          },
          { internalType: 'uint32', name: 'decayRate', type: 'uint32' },
          { internalType: 'uint256', name: 'faceValue', type: 'uint256' },
          { internalType: 'uint128', name: 'baseLiveWinProb', type: 'uint128' },
          { internalType: 'uint128', name: 'expiredWinProb', type: 'uint128' },
          { internalType: 'uint256', name: 'ticketDuration', type: 'uint256' },
        ],
        internalType: 'struct IEpochsManager.Epoch',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'epochId', type: 'uint256' }],
    name: 'getEpoch',
    outputs: [
      {
        components: [
          { internalType: 'uint256', name: 'startBlock', type: 'uint256' },
          { internalType: 'uint256', name: 'duration', type: 'uint256' },
          { internalType: 'uint256', name: 'endBlock', type: 'uint256' },
          {
            internalType: 'uint32',
            name: 'defaultPayoutPercentage',
            type: 'uint32',
          },
          { internalType: 'uint32', name: 'decayRate', type: 'uint32' },
          { internalType: 'uint256', name: 'faceValue', type: 'uint256' },
          { internalType: 'uint128', name: 'baseLiveWinProb', type: 'uint128' },
          { internalType: 'uint128', name: 'expiredWinProb', type: 'uint128' },
          { internalType: 'uint256', name: 'ticketDuration', type: 'uint256' },
        ],
        internalType: 'struct IEpochsManager.Epoch',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getNextEpochId',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'initialEpoch',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IERC721',
        name: 'rootSeekers',
        type: 'address',
      },
      {
        internalType: 'contract Directory',
        name: 'directory',
        type: 'address',
      },
      {
        internalType: 'contract Registries',
        name: 'registries',
        type: 'address',
      },
      {
        internalType: 'contract TicketingParameters',
        name: 'ticketingParameters',
        type: 'address',
      },
      { internalType: 'uint256', name: '_initialEpoch', type: 'uint256' },
      { internalType: 'uint256', name: '_epochDuration', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'initializeEpoch',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'joinNextEpoch',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: '_epochDuration', type: 'uint256' },
    ],
    name: 'setEpochDuration',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: '_initialEpoch', type: 'uint256' },
    ],
    name: 'setInitialEpoch',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;
export const Registries = [
  {
    inputs: [{ internalType: 'uint256', name: 'nodeLength', type: 'uint256' }],
    name: 'EndCannotExceedNumberOfNodes',
    type: 'error',
  },
  { inputs: [], name: 'EndMustBeGreaterThanStart', type: 'error' },
  { inputs: [], name: 'NonceCannotBeReused', type: 'error' },
  { inputs: [], name: 'PercentageCannotExceed100000', type: 'error' },
  { inputs: [], name: 'ProofNotSignedBySeekerAccount', type: 'error' },
  { inputs: [], name: 'PublicEndpointCannotBeEmpty', type: 'error' },
  { inputs: [], name: 'RootSeekersCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'SeekerAccountCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'SeekerAccountMustBeMsgSender', type: 'error' },
  { inputs: [], name: 'SeekerAccountMustOwnSeekerId', type: 'error' },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint32',
        name: 'defaultPayoutPercentage',
        type: 'uint32',
      },
    ],
    name: 'DefaultPayoutPercentageUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint8', name: 'version', type: 'uint8' },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferStarted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: '_rootSeekers',
    outputs: [{ internalType: 'contract IERC721', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'defaultPayoutPercentage',
    outputs: [{ internalType: 'uint32', name: '', type: 'uint32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getNodes',
    outputs: [{ internalType: 'address[]', name: '', type: 'address[]' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'seekerId', type: 'uint256' },
      { internalType: 'address', name: 'node', type: 'address' },
      { internalType: 'bytes32', name: 'nonce', type: 'bytes32' },
    ],
    name: 'getProofMessage',
    outputs: [{ internalType: 'bytes', name: '', type: 'bytes' }],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'start', type: 'uint256' },
      { internalType: 'uint256', name: 'end', type: 'uint256' },
    ],
    name: 'getRegistries',
    outputs: [
      { internalType: 'address[]', name: '', type: 'address[]' },
      {
        components: [
          { internalType: 'uint32', name: 'payoutPercentage', type: 'uint32' },
          { internalType: 'string', name: 'publicEndpoint', type: 'string' },
          { internalType: 'address', name: 'seekerAccount', type: 'address' },
          { internalType: 'uint256', name: 'seekerId', type: 'uint256' },
        ],
        internalType: 'struct IRegistries.Registry[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],
    name: 'getRegistry',
    outputs: [
      {
        components: [
          { internalType: 'uint32', name: 'payoutPercentage', type: 'uint32' },
          { internalType: 'string', name: 'publicEndpoint', type: 'string' },
          { internalType: 'address', name: 'seekerAccount', type: 'address' },
          { internalType: 'uint256', name: 'seekerId', type: 'uint256' },
        ],
        internalType: 'struct IRegistries.Registry',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getTotalNodes',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IERC721',
        name: 'rootSeekers',
        type: 'address',
      },
      {
        internalType: 'uint32',
        name: '_defaultPayoutPercentage',
        type: 'uint32',
      },
    ],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    name: 'nodes',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'string', name: 'publicEndpoint', type: 'string' },
    ],
    name: 'register',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '', type: 'address' }],
    name: 'registries',
    outputs: [
      { internalType: 'uint32', name: 'payoutPercentage', type: 'uint32' },
      { internalType: 'string', name: 'publicEndpoint', type: 'string' },
      { internalType: 'address', name: 'seekerAccount', type: 'address' },
      { internalType: 'uint256', name: 'seekerId', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'node', type: 'address' }],
    name: 'revokeSeekerAccount',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    name: 'seekerRegistration',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_defaultPayoutPercentage',
        type: 'uint32',
      },
    ],
    name: 'setDefaultPayoutPercentage',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'seekerAccount', type: 'address' },
      { internalType: 'uint256', name: 'seekerId', type: 'uint256' },
      { internalType: 'bytes32', name: 'nonce', type: 'bytes32' },
      { internalType: 'bytes', name: 'signature', type: 'bytes' },
    ],
    name: 'setSeekerAccount',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;
export const RewardsManager = [
  { inputs: [], name: 'AmountCannotBeZero', type: 'error' },
  { inputs: [], name: 'ContractNameCannotBeEmpty', type: 'error' },
  { inputs: [], name: 'DoNotAllowZeroAddress', type: 'error' },
  { inputs: [], name: 'InterfaceIdCannotBeZeroBytes', type: 'error' },
  { inputs: [], name: 'InvalidFixedPointResult', type: 'error' },
  { inputs: [], name: 'ManagerCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'NoRewardToClaim', type: 'error' },
  { inputs: [], name: 'NoStakeToCreateRewardPool', type: 'error' },
  { inputs: [], name: 'OnlyManagers', type: 'error' },
  { inputs: [], name: 'RewardPoolAlreadyExist', type: 'error' },
  { inputs: [], name: 'RewardPoolNotExist', type: 'error' },
  { inputs: [], name: 'StakeeCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'StakerCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'StakerKeyCannotBeZeroBytes', type: 'error' },
  {
    inputs: [{ internalType: 'string', name: 'name', type: 'string' }],
    name: 'TargetContractCannotBeZeroAddress',
    type: 'error',
  },
  {
    inputs: [
      { internalType: 'string', name: 'name', type: 'string' },
      { internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' },
    ],
    name: 'TargetNotSupportInterface',
    type: 'error',
  },
  { inputs: [], name: 'TokenCannotBeZeroAddress', type: 'error' },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint8', name: 'version', type: 'uint8' },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferStarted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: '_epochsManager',
    outputs: [
      { internalType: 'contract EpochsManager', name: '', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_stakingManager',
    outputs: [
      { internalType: 'contract StakingManager', name: '', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_token',
    outputs: [{ internalType: 'contract IERC20', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'manager', type: 'address' }],
    name: 'addManager',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'stakee', type: 'address' },
      { internalType: 'address', name: 'staker', type: 'address' },
    ],
    name: 'calculateStakerClaim',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'stakee', type: 'address' }],
    name: 'claimStakingRewards',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'stakee', type: 'address' },
      { internalType: 'address', name: 'staker', type: 'address' },
    ],
    name: 'getLastClaim',
    outputs: [
      {
        components: [
          { internalType: 'uint256', name: 'claimedAt', type: 'uint256' },
          { internalType: 'uint256', name: 'stake', type: 'uint256' },
        ],
        internalType: 'struct IRewardsManager.LastClaim',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'stakee', type: 'address' }],
    name: 'getPendingRewards',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'epochId', type: 'uint256' },
      { internalType: 'address', name: 'stakee', type: 'address' },
    ],
    name: 'getRewardPool',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'stakersRewardTotal',
            type: 'uint256',
          },
          { internalType: 'uint256', name: 'initializedAt', type: 'uint256' },
          {
            internalType: 'uint256',
            name: 'totalActiveStake',
            type: 'uint256',
          },
          {
            internalType: 'int128',
            name: 'initialCumulativeRewardFactor',
            type: 'int128',
          },
        ],
        internalType: 'struct IRewardsManager.RewardPool',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'epochId', type: 'uint256' },
      { internalType: 'address', name: 'stakee', type: 'address' },
    ],
    name: 'getRewardPoolActiveStake',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'epochId', type: 'uint256' },
      { internalType: 'address', name: 'stakee', type: 'address' },
    ],
    name: 'getRewardPoolKey',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'epochId', type: 'uint256' },
      { internalType: 'address', name: 'stakee', type: 'address' },
    ],
    name: 'getRewardPoolStakersTotal',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'stakee', type: 'address' },
      { internalType: 'address', name: 'staker', type: 'address' },
    ],
    name: 'getStakerKey',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'epochId', type: 'uint256' }],
    name: 'getTotalEpochRewards',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'epochId', type: 'uint256' }],
    name: 'getTotalEpochStakingRewards',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'stakee', type: 'address' },
      { internalType: 'uint256', name: 'amount', type: 'uint256' },
    ],
    name: 'incrementRewardPool',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'contract IERC20', name: 'token', type: 'address' },
      {
        internalType: 'contract StakingManager',
        name: 'stakingManager',
        type: 'address',
      },
      {
        internalType: 'contract EpochsManager',
        name: 'epochsManager',
        type: 'address',
      },
    ],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'stakee', type: 'address' }],
    name: 'initializeNextRewardPool',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    name: 'lastClaims',
    outputs: [
      { internalType: 'uint256', name: 'claimedAt', type: 'uint256' },
      { internalType: 'uint256', name: 'stake', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '', type: 'address' }],
    name: 'latestActiveRewardPools',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '', type: 'address' }],
    name: 'managers',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '', type: 'address' }],
    name: 'pendingRewards',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'manager', type: 'address' }],
    name: 'removeManager',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    name: 'rewardPools',
    outputs: [
      { internalType: 'uint256', name: 'stakersRewardTotal', type: 'uint256' },
      { internalType: 'uint256', name: 'initializedAt', type: 'uint256' },
      { internalType: 'uint256', name: 'totalActiveStake', type: 'uint256' },
      {
        internalType: 'int128',
        name: 'initialCumulativeRewardFactor',
        type: 'int128',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    name: 'totalEpochRewards',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    name: 'totalEpochStakingRewards',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    name: 'unclaimedStakingRewards',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'stakee', type: 'address' },
      { internalType: 'address', name: 'staker', type: 'address' },
    ],
    name: 'updatePendingRewards',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;
export const StakingManager = [
  { inputs: [], name: 'CannotCancelUnlockZeroAmount', type: 'error' },
  { inputs: [], name: 'CannotStakeZeroAmount', type: 'error' },
  {
    inputs: [
      { internalType: 'uint256', name: 'stakeAmount', type: 'uint256' },
      { internalType: 'uint256', name: 'unlockAmount', type: 'uint256' },
    ],
    name: 'CannotUnlockMoreThanStaked',
    type: 'error',
  },
  { inputs: [], name: 'CannotUnlockZeroAmount', type: 'error' },
  { inputs: [], name: 'ContractNameCannotBeEmpty', type: 'error' },
  { inputs: [], name: 'InterfaceIdCannotBeZeroBytes', type: 'error' },
  { inputs: [], name: 'NoStakeToUnlock', type: 'error' },
  {
    inputs: [{ internalType: 'uint256', name: 'seekerId', type: 'uint256' }],
    name: 'SeekerPowerNotRegistered',
    type: 'error',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'maxCapacity', type: 'uint256' },
      { internalType: 'uint256', name: 'currentCapacity', type: 'uint256' },
    ],
    name: 'StakeCapacityReached',
    type: 'error',
  },
  { inputs: [], name: 'StakeNotYetUnlocked', type: 'error' },
  { inputs: [], name: 'StakeeCannotBeZeroAddress', type: 'error' },
  {
    inputs: [{ internalType: 'string', name: 'name', type: 'string' }],
    name: 'TargetContractCannotBeZeroAddress',
    type: 'error',
  },
  {
    inputs: [
      { internalType: 'string', name: 'name', type: 'string' },
      { internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' },
    ],
    name: 'TargetNotSupportInterface',
    type: 'error',
  },
  { inputs: [], name: 'TokenCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'UnlockDurationCannotBeZero', type: 'error' },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint8', name: 'version', type: 'uint8' },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'minimumStakeProportion',
        type: 'uint256',
      },
    ],
    name: 'MinimumStakeProportionUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferStarted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'unlockDuration',
        type: 'uint256',
      },
    ],
    name: 'UnlockDurationUpdated',
    type: 'event',
  },
  {
    inputs: [],
    name: '_epochsManager',
    outputs: [
      { internalType: 'contract EpochsManager', name: '', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_rewardsManager',
    outputs: [
      { internalType: 'contract RewardsManager', name: '', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_seekerPowerOracle',
    outputs: [
      { internalType: 'contract SeekerPowerOracle', name: '', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_token',
    outputs: [{ internalType: 'contract IERC20', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'amount', type: 'uint256' },
      { internalType: 'address', name: 'stakee', type: 'address' },
    ],
    name: 'addStake',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'stakee', type: 'address' }],
    name: 'calculateCapacityFromMinStakingProportion',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'seekerId', type: 'uint256' }],
    name: 'calculateCapacityFromSeekerPower',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'stakee', type: 'address' }],
    name: 'calculateMaxAdditionalDelegatedStake',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'amount', type: 'uint256' },
      { internalType: 'address', name: 'stakee', type: 'address' },
    ],
    name: 'cancelUnlocking',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'stakee', type: 'address' }],
    name: 'checkMinimumStakeProportion',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'stakee', type: 'address' },
      { internalType: 'address', name: 'staker', type: 'address' },
    ],
    name: 'getCurrentStakerAmount',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'stakee', type: 'address' },
      { internalType: 'address', name: 'staker', type: 'address' },
    ],
    name: 'getKey',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'stakee', type: 'address' },
      { internalType: 'address', name: 'staker', type: 'address' },
    ],
    name: 'getStakeEntry',
    outputs: [
      {
        components: [
          { internalType: 'uint256', name: 'amount', type: 'uint256' },
          { internalType: 'uint256', name: 'updatedAt', type: 'uint256' },
          { internalType: 'uint256', name: 'epochId', type: 'uint256' },
        ],
        internalType: 'struct IStakingManager.StakeEntry',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'stakee', type: 'address' }],
    name: 'getStakeeTotalManagedStake',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getTotalManagedStake',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'contract IERC20', name: 'token', type: 'address' },
      {
        internalType: 'contract RewardsManager',
        name: 'rewardsManager',
        type: 'address',
      },
      {
        internalType: 'contract EpochsManager',
        name: 'epochsManager',
        type: 'address',
      },
      {
        internalType: 'contract SeekerPowerOracle',
        name: 'seekerPowerOracle',
        type: 'address',
      },
      { internalType: 'uint256', name: '_unlockDuration', type: 'uint256' },
      {
        internalType: 'uint32',
        name: '_minimumStakeProportion',
        type: 'uint32',
      },
      {
        internalType: 'uint256',
        name: '_seekerPowerMultiplier',
        type: 'uint256',
      },
    ],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'minimumStakeProportion',
    outputs: [{ internalType: 'uint32', name: '', type: 'uint32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'seekerPowerMultiplier',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_minimumStakeProportion',
        type: 'uint32',
      },
    ],
    name: 'setMinimumStakeProportion',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: '_unlockDuration', type: 'uint256' },
    ],
    name: 'setUnlockDuration',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '', type: 'address' }],
    name: 'stakes',
    outputs: [
      { internalType: 'uint256', name: 'totalManagedStake', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalManagedStake',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'unlockDuration',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'amount', type: 'uint256' },
      { internalType: 'address', name: 'stakee', type: 'address' },
    ],
    name: 'unlockStake',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    name: 'unlockings',
    outputs: [
      { internalType: 'uint256', name: 'amount', type: 'uint256' },
      { internalType: 'uint256', name: 'unlockAt', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'stakee', type: 'address' }],
    name: 'withdrawStake',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;
export const SyloTicketing = [
  { inputs: [], name: 'AccountCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'ContractNameCannotBeEmpty', type: 'error' },
  { inputs: [], name: 'EscrowAmountCannotBeZero', type: 'error' },
  { inputs: [], name: 'InterfaceIdCannotBeZeroBytes', type: 'error' },
  { inputs: [], name: 'InvalidReceiverSignature', type: 'error' },
  { inputs: [], name: 'InvalidReceiverSigningPermission', type: 'error' },
  { inputs: [], name: 'InvalidSenderSignature', type: 'error' },
  { inputs: [], name: 'InvalidSenderSigningPermission', type: 'error' },
  {
    inputs: [{ internalType: 'address', name: 'receiver', type: 'address' }],
    name: 'MissingFuturepassAccount',
    type: 'error',
  },
  { inputs: [], name: 'NoEsrowAndPenalty', type: 'error' },
  { inputs: [], name: 'PenaltyAmountCannotBeZero', type: 'error' },
  { inputs: [], name: 'RedeemerCommitMismatch', type: 'error' },
  {
    inputs: [{ internalType: 'uint256', name: 'epochId', type: 'uint256' }],
    name: 'RedeemerMustHaveJoinedEpoch',
    type: 'error',
  },
  {
    inputs: [{ internalType: 'string', name: 'name', type: 'string' }],
    name: 'TargetContractCannotBeZeroAddress',
    type: 'error',
  },
  {
    inputs: [
      { internalType: 'string', name: 'name', type: 'string' },
      { internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' },
    ],
    name: 'TargetNotSupportInterface',
    type: 'error',
  },
  { inputs: [], name: 'TicketAlreadyRedeemed', type: 'error' },
  { inputs: [], name: 'TicketAlreadyUsed', type: 'error' },
  { inputs: [], name: 'TicketCannotBeFromFutureBlock', type: 'error' },
  { inputs: [], name: 'TicketEpochNotFound', type: 'error' },
  { inputs: [], name: 'TicketNotCreatedInTheEpoch', type: 'error' },
  { inputs: [], name: 'TicketNotWinning', type: 'error' },
  { inputs: [], name: 'TicketReceiverCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'TicketRedeemerCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'TicketSenderCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'TokenCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'UnlockDurationCannotBeZero', type: 'error' },
  { inputs: [], name: 'UnlockingInProcess', type: 'error' },
  { inputs: [], name: 'UnlockingNotCompleted', type: 'error' },
  { inputs: [], name: 'UnlockingNotInProcess', type: 'error' },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint8', name: 'version', type: 'uint8' },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'epochId',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'redeemer',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'receiver',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'generationBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'MultiReceiverRedemption',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferStarted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'epochId',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'redeemer',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'receiver',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'generationBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'Redemption',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
    ],
    name: 'SenderPenaltyBurnt',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'unlockDuration',
        type: 'uint256',
      },
    ],
    name: 'UnlockDurationUpdated',
    type: 'event',
  },
  {
    inputs: [],
    name: '_authorizedAccounts',
    outputs: [
      {
        internalType: 'contract AuthorizedAccounts',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_directory',
    outputs: [
      { internalType: 'contract Directory', name: '', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_epochsManager',
    outputs: [
      { internalType: 'contract EpochsManager', name: '', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_futurepassRegistrar',
    outputs: [
      {
        internalType: 'contract IFuturePassRegistrar',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_registries',
    outputs: [
      { internalType: 'contract Registries', name: '', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_rewardsManager',
    outputs: [
      { internalType: 'contract RewardsManager', name: '', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_stakingManager',
    outputs: [
      { internalType: 'contract StakingManager', name: '', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: '_token',
    outputs: [{ internalType: 'contract IERC20', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'epochId', type: 'uint256' },
      { internalType: 'uint256', name: 'generationBlock', type: 'uint256' },
    ],
    name: 'calculateWinningProbability',
    outputs: [{ internalType: 'uint128', name: '', type: 'uint128' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'generationBlock', type: 'uint256' },
      { internalType: 'uint256', name: 'rand', type: 'uint256' },
    ],
    name: 'createCommit',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'amount', type: 'uint256' },
      { internalType: 'address', name: 'account', type: 'address' },
    ],
    name: 'depositEscrow',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'amount', type: 'uint256' },
      { internalType: 'address', name: 'account', type: 'address' },
    ],
    name: 'depositPenalty',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '', type: 'address' }],
    name: 'deposits',
    outputs: [
      { internalType: 'uint256', name: 'escrow', type: 'uint256' },
      { internalType: 'uint256', name: 'penalty', type: 'uint256' },
      { internalType: 'uint256', name: 'unlockAt', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'uint256', name: 'epochId', type: 'uint256' },
          {
            components: [
              { internalType: 'address', name: 'main', type: 'address' },
              { internalType: 'address', name: 'delegated', type: 'address' },
            ],
            internalType: 'struct ISyloTicketing.User',
            name: 'sender',
            type: 'tuple',
          },
          { internalType: 'address', name: 'redeemer', type: 'address' },
          { internalType: 'uint256', name: 'generationBlock', type: 'uint256' },
          { internalType: 'bytes32', name: 'redeemerCommit', type: 'bytes32' },
        ],
        internalType: 'struct ISyloTicketing.MultiReceiverTicket',
        name: 'ticket',
        type: 'tuple',
      },
    ],
    name: 'getMultiReceiverTicketHash',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'uint256', name: 'epochId', type: 'uint256' },
          {
            components: [
              { internalType: 'address', name: 'main', type: 'address' },
              { internalType: 'address', name: 'delegated', type: 'address' },
            ],
            internalType: 'struct ISyloTicketing.User',
            name: 'sender',
            type: 'tuple',
          },
          {
            components: [
              { internalType: 'address', name: 'main', type: 'address' },
              { internalType: 'address', name: 'delegated', type: 'address' },
            ],
            internalType: 'struct ISyloTicketing.User',
            name: 'receiver',
            type: 'tuple',
          },
          { internalType: 'address', name: 'redeemer', type: 'address' },
          { internalType: 'uint256', name: 'generationBlock', type: 'uint256' },
          { internalType: 'bytes32', name: 'redeemerCommit', type: 'bytes32' },
        ],
        internalType: 'struct ISyloTicketing.Ticket',
        name: 'ticket',
        type: 'tuple',
      },
    ],
    name: 'getTicketHash',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'contract IERC20', name: 'token', type: 'address' },
      {
        internalType: 'contract Registries',
        name: 'registries',
        type: 'address',
      },
      {
        internalType: 'contract StakingManager',
        name: 'stakingManager',
        type: 'address',
      },
      {
        internalType: 'contract Directory',
        name: 'directory',
        type: 'address',
      },
      {
        internalType: 'contract EpochsManager',
        name: 'epochsManager',
        type: 'address',
      },
      {
        internalType: 'contract RewardsManager',
        name: 'rewardsManager',
        type: 'address',
      },
      {
        internalType: 'contract AuthorizedAccounts',
        name: 'authorizedAccounts',
        type: 'address',
      },
      {
        internalType: 'contract IFuturePassRegistrar',
        name: 'futurepassRegistrar',
        type: 'address',
      },
      { internalType: 'uint256', name: '_unlockDuration', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'bytes', name: 'senderSig', type: 'bytes' },
      { internalType: 'bytes', name: 'receiverSig', type: 'bytes' },
      { internalType: 'uint256', name: 'epochId', type: 'uint256' },
      { internalType: 'uint256', name: 'generationBlock', type: 'uint256' },
      { internalType: 'uint256', name: 'redeemerRand', type: 'uint256' },
    ],
    name: 'isWinningTicket',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'lockDeposits',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'uint256', name: 'epochId', type: 'uint256' },
          {
            components: [
              { internalType: 'address', name: 'main', type: 'address' },
              { internalType: 'address', name: 'delegated', type: 'address' },
            ],
            internalType: 'struct ISyloTicketing.User',
            name: 'sender',
            type: 'tuple',
          },
          {
            components: [
              { internalType: 'address', name: 'main', type: 'address' },
              { internalType: 'address', name: 'delegated', type: 'address' },
            ],
            internalType: 'struct ISyloTicketing.User',
            name: 'receiver',
            type: 'tuple',
          },
          { internalType: 'address', name: 'redeemer', type: 'address' },
          { internalType: 'uint256', name: 'generationBlock', type: 'uint256' },
          { internalType: 'bytes32', name: 'redeemerCommit', type: 'bytes32' },
        ],
        internalType: 'struct ISyloTicketing.Ticket',
        name: 'ticket',
        type: 'tuple',
      },
      { internalType: 'uint256', name: 'redeemerRand', type: 'uint256' },
      { internalType: 'bytes', name: 'senderSig', type: 'bytes' },
      { internalType: 'bytes', name: 'receiverSig', type: 'bytes' },
    ],
    name: 'redeem',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'uint256', name: 'epochId', type: 'uint256' },
          {
            components: [
              { internalType: 'address', name: 'main', type: 'address' },
              { internalType: 'address', name: 'delegated', type: 'address' },
            ],
            internalType: 'struct ISyloTicketing.User',
            name: 'sender',
            type: 'tuple',
          },
          { internalType: 'address', name: 'redeemer', type: 'address' },
          { internalType: 'uint256', name: 'generationBlock', type: 'uint256' },
          { internalType: 'bytes32', name: 'redeemerCommit', type: 'bytes32' },
        ],
        internalType: 'struct ISyloTicketing.MultiReceiverTicket',
        name: 'ticket',
        type: 'tuple',
      },
      { internalType: 'uint256', name: 'redeemerRand', type: 'uint256' },
      {
        components: [
          { internalType: 'address', name: 'main', type: 'address' },
          { internalType: 'address', name: 'delegated', type: 'address' },
        ],
        internalType: 'struct ISyloTicketing.User',
        name: 'receiver',
        type: 'tuple',
      },
      { internalType: 'bytes', name: 'senderSig', type: 'bytes' },
      { internalType: 'bytes', name: 'receiverSig', type: 'bytes' },
    ],
    name: 'redeemMultiReceiver',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'uint256', name: 'epochId', type: 'uint256' },
          {
            components: [
              { internalType: 'address', name: 'main', type: 'address' },
              { internalType: 'address', name: 'delegated', type: 'address' },
            ],
            internalType: 'struct ISyloTicketing.User',
            name: 'sender',
            type: 'tuple',
          },
          { internalType: 'address', name: 'redeemer', type: 'address' },
          { internalType: 'uint256', name: 'generationBlock', type: 'uint256' },
          { internalType: 'bytes32', name: 'redeemerCommit', type: 'bytes32' },
        ],
        internalType: 'struct ISyloTicketing.MultiReceiverTicket',
        name: 'ticket',
        type: 'tuple',
      },
      {
        components: [
          { internalType: 'address', name: 'main', type: 'address' },
          { internalType: 'address', name: 'delegated', type: 'address' },
        ],
        internalType: 'struct ISyloTicketing.User',
        name: 'receiver',
        type: 'tuple',
      },
      { internalType: 'uint256', name: 'redeemerRand', type: 'uint256' },
      { internalType: 'bytes', name: 'senderSig', type: 'bytes' },
      { internalType: 'bytes', name: 'receiverSig', type: 'bytes' },
    ],
    name: 'requireValidWinningMultiReceiverTicket',
    outputs: [
      { internalType: 'bytes32', name: 'ticketHash', type: 'bytes32' },
      { internalType: 'bytes32', name: 'ticketReceiverHash', type: 'bytes32' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'uint256', name: 'epochId', type: 'uint256' },
          {
            components: [
              { internalType: 'address', name: 'main', type: 'address' },
              { internalType: 'address', name: 'delegated', type: 'address' },
            ],
            internalType: 'struct ISyloTicketing.User',
            name: 'sender',
            type: 'tuple',
          },
          {
            components: [
              { internalType: 'address', name: 'main', type: 'address' },
              { internalType: 'address', name: 'delegated', type: 'address' },
            ],
            internalType: 'struct ISyloTicketing.User',
            name: 'receiver',
            type: 'tuple',
          },
          { internalType: 'address', name: 'redeemer', type: 'address' },
          { internalType: 'uint256', name: 'generationBlock', type: 'uint256' },
          { internalType: 'bytes32', name: 'redeemerCommit', type: 'bytes32' },
        ],
        internalType: 'struct ISyloTicketing.Ticket',
        name: 'ticket',
        type: 'tuple',
      },
      { internalType: 'uint256', name: 'redeemerRand', type: 'uint256' },
      { internalType: 'bytes', name: 'senderSig', type: 'bytes' },
      { internalType: 'bytes', name: 'receiverSig', type: 'bytes' },
    ],
    name: 'requireValidWinningTicket',
    outputs: [{ internalType: 'bytes32', name: 'ticketHash', type: 'bytes32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: '_unlockDuration', type: 'uint256' },
    ],
    name: 'setUnlockDuration',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'unlockDeposits',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'unlockDuration',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    name: 'usedTickets',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],
    name: 'withdrawTo',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;
export const SyloToken = [
  { inputs: [], stateMutability: 'nonpayable', type: 'constructor' },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'from', type: 'address' },
      { indexed: true, internalType: 'address', name: 'to', type: 'address' },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [
      { internalType: 'address', name: 'owner', type: 'address' },
      { internalType: 'address', name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'spender', type: 'address' },
      { internalType: 'uint256', name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'spender', type: 'address' },
      { internalType: 'uint256', name: 'subtractedValue', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'spender', type: 'address' },
      { internalType: 'uint256', name: 'addedValue', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [{ internalType: 'string', name: '', type: 'string' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [{ internalType: 'string', name: '', type: 'string' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'to', type: 'address' },
      { internalType: 'uint256', name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'from', type: 'address' },
      { internalType: 'address', name: 'to', type: 'address' },
      { internalType: 'uint256', name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;
export const TicketingParameters = [
  { inputs: [], name: 'FaceValueCannotBeZero', type: 'error' },
  { inputs: [], name: 'TicketDurationCannotBeZero', type: 'error' },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint128',
        name: 'baseLiveWinprob',
        type: 'uint128',
      },
    ],
    name: 'BaseLiveWinProbUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint32',
        name: 'decayRate',
        type: 'uint32',
      },
    ],
    name: 'DecayRateUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint128',
        name: 'expiredWinProb',
        type: 'uint128',
      },
    ],
    name: 'ExpiredWinProbUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'faceValue',
        type: 'uint256',
      },
    ],
    name: 'FaceValueUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint8', name: 'version', type: 'uint8' },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferStarted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'ticketDuration',
        type: 'uint256',
      },
    ],
    name: 'TicketDurationUpdated',
    type: 'event',
  },
  {
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'baseLiveWinProb',
    outputs: [{ internalType: 'uint128', name: '', type: 'uint128' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decayRate',
    outputs: [{ internalType: 'uint32', name: '', type: 'uint32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'expiredWinProb',
    outputs: [{ internalType: 'uint128', name: '', type: 'uint128' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'faceValue',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getTicketingParameters',
    outputs: [
      { internalType: 'uint256', name: '', type: 'uint256' },
      { internalType: 'uint128', name: '', type: 'uint128' },
      { internalType: 'uint128', name: '', type: 'uint128' },
      { internalType: 'uint256', name: '', type: 'uint256' },
      { internalType: 'uint32', name: '', type: 'uint32' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: '_faceValue', type: 'uint256' },
      { internalType: 'uint128', name: '_baseLiveWinProb', type: 'uint128' },
      { internalType: 'uint128', name: '_expiredWinProb', type: 'uint128' },
      { internalType: 'uint32', name: '_decayRate', type: 'uint32' },
      { internalType: 'uint256', name: '_ticketDuration', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint128', name: '_baseLiveWinProb', type: 'uint128' },
    ],
    name: 'setBaseLiveWinProb',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint32', name: '_decayRate', type: 'uint32' }],
    name: 'setDecayRate',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint128', name: '_expiredWinProb', type: 'uint128' },
    ],
    name: 'setExpiredWinProb',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: '_faceValue', type: 'uint256' }],
    name: 'setFaceValue',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: '_ticketDuration', type: 'uint256' },
    ],
    name: 'setTicketDuration',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ticketDuration',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;
export const AuthorizedAccounts = [
  { inputs: [], name: 'AccountAlreadyAuthorized', type: 'error' },
  { inputs: [], name: 'AccountDoesNotExist', type: 'error' },
  { inputs: [], name: 'AtBlockNumberCannotBeZero', type: 'error' },
  { inputs: [], name: 'AuthorizedAccountCannotBeZeroAddress', type: 'error' },
  { inputs: [], name: 'MainAccountCannotBeZeroAddress', type: 'error' },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint8', name: 'version', type: 'uint8' },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferStarted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'main', type: 'address' },
      {
        indexed: true,
        internalType: 'address',
        name: 'authorized',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'enum IAuthorizedAccounts.Permission[]',
        name: 'permissions',
        type: 'uint8[]',
      },
    ],
    name: 'PermissionsAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'main', type: 'address' },
      {
        indexed: true,
        internalType: 'address',
        name: 'authorized',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'enum IAuthorizedAccounts.Permission[]',
        name: 'permissions',
        type: 'uint8[]',
      },
    ],
    name: 'PermissionsRemoved',
    type: 'event',
  },
  {
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'authorized', type: 'address' },
      {
        internalType: 'enum IAuthorizedAccounts.Permission[]',
        name: 'permissions',
        type: 'uint8[]',
      },
    ],
    name: 'addPermissions',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'authorized', type: 'address' },
      {
        internalType: 'enum IAuthorizedAccounts.Permission[]',
        name: 'permissions',
        type: 'uint8[]',
      },
    ],
    name: 'authorizeAccount',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: '', type: 'address' },
      { internalType: 'uint256', name: '', type: 'uint256' },
    ],
    name: 'authorizedAccounts',
    outputs: [
      { internalType: 'address', name: 'account', type: 'address' },
      { internalType: 'uint256', name: 'authorizedAt', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'main', type: 'address' }],
    name: 'getAuthorizedAccounts',
    outputs: [
      {
        components: [
          { internalType: 'address', name: 'account', type: 'address' },
          { internalType: 'uint256', name: 'authorizedAt', type: 'uint256' },
          {
            components: [
              {
                internalType: 'enum IAuthorizedAccounts.Permission',
                name: 'permission',
                type: 'uint8',
              },
              {
                internalType: 'uint256',
                name: 'authorizedAt',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'unauthorizedAt',
                type: 'uint256',
              },
            ],
            internalType: 'struct IAuthorizedAccounts.AuthorizedPermission[]',
            name: 'permissions',
            type: 'tuple[]',
          },
        ],
        internalType: 'struct IAuthorizedAccounts.AuthorizedAccount[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'authorized', type: 'address' },
      {
        internalType: 'enum IAuthorizedAccounts.Permission[]',
        name: 'permissions',
        type: 'uint8[]',
      },
    ],
    name: 'removePermissions',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'authorized', type: 'address' }],
    name: 'unauthorizeAccount',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'main', type: 'address' },
      { internalType: 'address', name: 'authorized', type: 'address' },
      {
        internalType: 'enum IAuthorizedAccounts.Permission',
        name: 'permission',
        type: 'uint8',
      },
      { internalType: 'uint256', name: 'atBlock', type: 'uint256' },
    ],
    name: 'validatePermission',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
] as const;
export const SeekerPowerOracle = [
  { inputs: [], name: 'NonceCannotBeReused', type: 'error' },
  { inputs: [], name: 'UnauthorizedRegisterSeekerPowerCall', type: 'error' },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint8', name: 'version', type: 'uint8' },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferStarted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'seekerId',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'power',
        type: 'uint256',
      },
    ],
    name: 'SeekerPowerUpdated',
    type: 'event',
  },
  {
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'seekerId', type: 'uint256' },
      { internalType: 'uint256', name: 'power', type: 'uint256' },
      { internalType: 'bytes32', name: 'nonce', type: 'bytes32' },
    ],
    name: 'getProofMessage',
    outputs: [{ internalType: 'bytes', name: '', type: 'bytes' }],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'seekerId', type: 'uint256' }],
    name: 'getSeekerPower',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '_oracle', type: 'address' }],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'oracle',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'seekerId', type: 'uint256' },
      { internalType: 'uint256', name: 'power', type: 'uint256' },
      { internalType: 'bytes32', name: 'nonce', type: 'bytes32' },
      { internalType: 'bytes', name: 'proof', type: 'bytes' },
    ],
    name: 'registerSeekerPower',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'seekerId', type: 'uint256' },
      { internalType: 'uint256', name: 'power', type: 'uint256' },
    ],
    name: 'registerSeekerPowerRestricted',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    name: 'seekerPowers',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '_oracle', type: 'address' }],
    name: 'setOracle',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;
