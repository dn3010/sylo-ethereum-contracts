{
  "address": "0x6Da9aF38B3Db84278F67f645f77312CEc7220Ea4",
  "abi": [
    {
      "inputs": [],
      "name": "AccountAlreadyAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AccountDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AtBlockNumberCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AttachedAuthorizedAccountExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AttachedAuthorizedAccountInvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuthorizedAccountCannotBeZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MainAccountCannotBeZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "main",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorized",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IAuthorizedAccounts.Permission[]",
          "name": "permissions",
          "type": "uint8[]"
        }
      ],
      "name": "PermissionsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "main",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorized",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IAuthorizedAccounts.Permission[]",
          "name": "permissions",
          "type": "uint8[]"
        }
      ],
      "name": "PermissionsRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorized",
          "type": "address"
        },
        {
          "internalType": "enum IAuthorizedAccounts.Permission[]",
          "name": "permissions",
          "type": "uint8[]"
        }
      ],
      "name": "addPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorized",
          "type": "address"
        },
        {
          "internalType": "enum IAuthorizedAccounts.Permission[]",
          "name": "permissions",
          "type": "uint8[]"
        }
      ],
      "name": "authorizeAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "authorizedAccounts",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "authorizedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "prefix",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "suffix",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "infixOne",
          "type": "string"
        }
      ],
      "name": "createAttachedAuthorizedAccountProofMessage",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "main",
          "type": "address"
        }
      ],
      "name": "getAuthorizedAccounts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "authorizedAt",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "enum IAuthorizedAccounts.Permission",
                  "name": "permission",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "authorizedAt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "unauthorizedAt",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IAuthorizedAccounts.AuthorizedPermission[]",
              "name": "permissions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IAuthorizedAccounts.AuthorizedAccount[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorized",
          "type": "address"
        },
        {
          "internalType": "enum IAuthorizedAccounts.Permission[]",
          "name": "permissions",
          "type": "uint8[]"
        }
      ],
      "name": "removePermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorized",
          "type": "address"
        }
      ],
      "name": "unauthorizeAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "main",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "prefix",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "suffix",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "infixOne",
              "type": "string"
            }
          ],
          "internalType": "struct IAuthorizedAccounts.AttachedAuthorizedAccount",
          "name": "account",
          "type": "tuple"
        }
      ],
      "name": "validateAttachedAuthorizedAccount",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "main",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authorized",
          "type": "address"
        },
        {
          "internalType": "enum IAuthorizedAccounts.Permission",
          "name": "permission",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "atBlock",
          "type": "uint256"
        }
      ],
      "name": "validatePermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb4cd9a912566fa92d9e695d58ae8b611143352e2043fc7ace38fccb3d891ddf",
  "receipt": {
    "to": null,
    "from": "0x448c8e9e1816300Dd052e77D2A44c990A2807D15",
    "contractAddress": "0x6Da9aF38B3Db84278F67f645f77312CEc7220Ea4",
    "transactionIndex": 0,
    "gasUsed": "1803787",
    "logsBloom": "0x
    "blockHash": "0xdc307b6d0d97352ce5734dde7767e9eaec98373402e0da2a2432c8beb1eb1a41",
    "transactionHash": "0xeb4cd9a912566fa92d9e695d58ae8b611143352e2043fc7ace38fccb3d891ddf",
    "logs": [],
    "blockNumber": 14503485,
    "cumulativeGasUsed": "1803787",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "88376f86b1679d3c6224323f9572fd4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountAlreadyAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccountDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AtBlockNumberCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AttachedAuthorizedAccountExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AttachedAuthorizedAccountInvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuthorizedAccountCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MainAccountCannotBeZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"main\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IAuthorizedAccounts.Permission[]\",\"name\":\"permissions\",\"type\":\"uint8[]\"}],\"name\":\"PermissionsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"main\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IAuthorizedAccounts.Permission[]\",\"name\":\"permissions\",\"type\":\"uint8[]\"}],\"name\":\"PermissionsRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"},{\"internalType\":\"enum IAuthorizedAccounts.Permission[]\",\"name\":\"permissions\",\"type\":\"uint8[]\"}],\"name\":\"addPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"},{\"internalType\":\"enum IAuthorizedAccounts.Permission[]\",\"name\":\"permissions\",\"type\":\"uint8[]\"}],\"name\":\"authorizeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"authorizedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"suffix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"infixOne\",\"type\":\"string\"}],\"name\":\"createAttachedAuthorizedAccountProofMessage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"main\",\"type\":\"address\"}],\"name\":\"getAuthorizedAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"authorizedAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum IAuthorizedAccounts.Permission\",\"name\":\"permission\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"authorizedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unauthorizedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IAuthorizedAccounts.AuthorizedPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IAuthorizedAccounts.AuthorizedAccount[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"},{\"internalType\":\"enum IAuthorizedAccounts.Permission[]\",\"name\":\"permissions\",\"type\":\"uint8[]\"}],\"name\":\"removePermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"}],\"name\":\"unauthorizeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"main\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"suffix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"infixOne\",\"type\":\"string\"}],\"internalType\":\"struct IAuthorizedAccounts.AttachedAuthorizedAccount\",\"name\":\"account\",\"type\":\"tuple\"}],\"name\":\"validateAttachedAuthorizedAccount\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"main\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"},{\"internalType\":\"enum IAuthorizedAccounts.Permission\",\"name\":\"permission\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"atBlock\",\"type\":\"uint256\"}],\"name\":\"validatePermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addPermissions(address,uint8[])\":{\"params\":{\"authorized\":\"The authorized account address\",\"permissions\":\"The new permissions will be added to the authorized account\"}},\"authorizeAccount(address,uint8[])\":{\"params\":{\"authorized\":\"The address that the main account wants to authorize\",\"permissions\":\"The list of permissions that the authorized account can perform within the Sylo network.\"}},\"createAttachedAuthorizedAccountProofMessage(address,uint256,string,string,string)\":{\"params\":{\"account\":\"The authorized account\",\"infixOne\":\"String that is placed between the address and expiry in the signing message\",\"prefix\":\"String that is prefixed before the account address in the signing message\",\"suffix\":\"String that is placed after the expiry value in the signing message\"}},\"getAuthorizedAccounts(address)\":{\"params\":{\"main\":\"The address of main account\"},\"returns\":{\"_0\":\"An array of authorized accounts\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"removePermissions(address,uint8[])\":{\"params\":{\"authorized\":\"The address of authorized account\",\"permissions\":\"The list of permissions will be removed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unauthorizeAccount(address)\":{\"params\":{\"authorized\":\"The address of the authorized account\"}},\"validatePermission(address,address,uint8,uint256)\":{\"params\":{\"atBlock\":\"The block number to check if the permission is valid between the permission's authorizedAt and unauthorizedAt period. It is added later to prevent the timing attack. E.g. If the main account authorizes the PersonalSign permission at block 1, creates a ticket at block 2, then unauthorizes the permission at block 3, the ticket will be invalid and cannot be redeemed. To avoid this, the `atBlock` param is needed to check if the permission is authorized between its authorizedAt and unauthorizedAt duration.\",\"authorized\":\"The address of authorized account\",\"main\":\"The address of main account\",\"permission\":\"The permission needs to be verified with the authorized account\"},\"returns\":{\"_0\":\"boolean value\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPermissions(address,uint8[])\":{\"notice\":\"Adds new permissions to a specific authorized account. - Adding permissions that don't exist in the Permission enum will return with panic code 0x21 (convert a value that is too big or negative into an enum type). - Adding duplicate permissions will update the permissions' authorizedAt value. - Adding permissions that were previously unauthorized will update the authorizedAt and unauthorizedAt values (refer to the comment in IAuthorizedAccount -> AuthorizedPermission struct). This will revert if the account does not exist.\"},\"authorizeAccount(address,uint8[])\":{\"notice\":\"Adds new authorized accounts with certain permissions. This will revert if the account has already existed.\"},\"authorizedAccounts(address,uint256)\":{\"notice\":\"Tracks authorized accounts for every main account\"},\"createAttachedAuthorizedAccountProofMessage(address,uint256,string,string,string)\":{\"notice\":\"Creates a proof for an authorized account. The prefix, suffix, and infix strings allow applications to create more human-readable messages for personal_sign requests.\"},\"getAuthorizedAccounts(address)\":{\"notice\":\"Get all authorized accounts associated with a given account\"},\"removePermissions(address,uint8[])\":{\"notice\":\"Removes permissions of specific authorized account. - Removing permissions that don't exist in the Permission enum will return with panic code 0x21 (convert a value that is too big or negative into an enum type). - Removing duplicate/authorized permissions will update the permissions' unauthorizedAt value. This will revert if the account does not exist.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns true if the contract implements the interface defined by `interfaceId` from ERC165.\"},\"unauthorizeAccount(address)\":{\"notice\":\"Removes all permissions of a specific authorized account associated with the msg.sender, and sets the account's authorizedAt to 0. Note: It does not remove the authorized account from the list. This will revert if the account does not exist.\"},\"validatePermission(address,address,uint8,uint256)\":{\"notice\":\"Validates permission of an authorized account associated with the main account.\"}},\"notice\":\"Manages authorized accounts with limited permissions on behalf of main account these authorized accounts are allowed to perform some certain actions in the Sylo network in order to reduce the works for main account\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuthorizedAccounts.sol\":\"AuthorizedAccounts\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x84efb8889801b0ac817324aff6acc691d07bbee816b671817132911d287a8c63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/AuthorizedAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./interfaces/IAuthorizedAccounts.sol\\\";\\n\\n/**\\n * @notice Manages authorized accounts with limited permissions on behalf of main account\\n * these authorized accounts are allowed to perform some certain actions in the Sylo network\\n * in order to reduce the works for main account\\n */\\ncontract AuthorizedAccounts is\\n    IAuthorizedAccounts,\\n    Initializable,\\n    Ownable2StepUpgradeable,\\n    ERC165\\n{\\n    /**\\n     * @notice Tracks authorized accounts for every main account\\n     */\\n    mapping(address => AuthorizedAccount[]) public authorizedAccounts;\\n\\n    event PermissionsAdded(\\n        address indexed main,\\n        address indexed authorized,\\n        Permission[] permissions\\n    );\\n\\n    event PermissionsRemoved(\\n        address indexed main,\\n        address indexed authorized,\\n        Permission[] permissions\\n    );\\n\\n    error AuthorizedAccountCannotBeZeroAddress();\\n    error MainAccountCannotBeZeroAddress();\\n    error AtBlockNumberCannotBeZero();\\n    error AccountAlreadyAuthorized();\\n    error AccountDoesNotExist();\\n    error AttachedAuthorizedAccountExpired();\\n    error AttachedAuthorizedAccountInvalidProof();\\n\\n    function initialize() external initializer {\\n        Ownable2StepUpgradeable.__Ownable2Step_init();\\n    }\\n\\n    /**\\n     * @notice Returns true if the contract implements the interface defined by\\n     * `interfaceId` from ERC165.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAuthorizedAccounts).interfaceId;\\n    }\\n\\n    /**\\n     * @notice Adds new authorized accounts with certain permissions.\\n     * This will revert if the account has already existed.\\n     * @param authorized The address that the main account wants to authorize\\n     * @param permissions The list of permissions that the authorized account\\n     * can perform within the Sylo network.\\n     */\\n    function authorizeAccount(address authorized, Permission[] calldata permissions) external {\\n        if (authorized == address(0)) {\\n            revert AuthorizedAccountCannotBeZeroAddress();\\n        }\\n\\n        // check if account has already been authorized\\n        AuthorizedAccount[] storage authAccounts = authorizedAccounts[msg.sender];\\n        for (uint i; i < authAccounts.length; ++i) {\\n            if (authAccounts[i].account == authorized) {\\n                if (authAccounts[i].authorizedAt != 0) {\\n                    revert AccountAlreadyAuthorized();\\n                }\\n\\n                authAccounts[i].authorizedAt = block.number;\\n                return _addPermissions(authorized, authAccounts[i], permissions);\\n            }\\n        }\\n\\n        // add new authorized account to the list\\n        authAccounts.push();\\n        AuthorizedAccount storage newAccount = authAccounts[authAccounts.length - 1];\\n        newAccount.account = authorized;\\n        newAccount.authorizedAt = block.number;\\n\\n        _addPermissions(authorized, newAccount, permissions);\\n    }\\n\\n    /**\\n     * @notice Removes all permissions of a specific authorized account\\n     * associated with the msg.sender, and sets the account's authorizedAt to 0.\\n     * Note: It does not remove the authorized account from the list.\\n     * This will revert if the account does not exist.\\n     * @param authorized The address of the authorized account\\n     */\\n    function unauthorizeAccount(address authorized) external {\\n        if (authorized == address(0)) {\\n            revert AuthorizedAccountCannotBeZeroAddress();\\n        }\\n\\n        AuthorizedAccount[] storage authAccounts = authorizedAccounts[msg.sender];\\n        for (uint i; i < authAccounts.length; ++i) {\\n            if (authAccounts[i].account == authorized) {\\n                delete authAccounts[i].authorizedAt;\\n                return _removePermissions(authorized, authAccounts[i], getAllPermissions());\\n            }\\n        }\\n\\n        revert AccountDoesNotExist();\\n    }\\n\\n    /**\\n     * @notice Adds new permissions to a specific authorized account.\\n     * - Adding permissions that don't exist in the Permission enum will return\\n     * with panic code 0x21 (convert a value that is too big or negative into an enum type).\\n     * - Adding duplicate permissions will update the permissions' authorizedAt value.\\n     * - Adding permissions that were previously unauthorized will update\\n     * the authorizedAt and unauthorizedAt values (refer to the comment in\\n     * IAuthorizedAccount -> AuthorizedPermission struct).\\n     * This will revert if the account does not exist.\\n     * @param authorized The authorized account address\\n     * @param permissions The new permissions will be added to the authorized account\\n     */\\n    function addPermissions(address authorized, Permission[] calldata permissions) external {\\n        if (authorized == address(0)) {\\n            revert AuthorizedAccountCannotBeZeroAddress();\\n        }\\n\\n        AuthorizedAccount[] storage authAccounts = authorizedAccounts[msg.sender];\\n        for (uint i; i < authAccounts.length; ++i) {\\n            if (authAccounts[i].account == authorized) {\\n                return _addPermissions(authorized, authAccounts[i], permissions);\\n            }\\n        }\\n\\n        revert AccountDoesNotExist();\\n    }\\n\\n    function _addPermissions(\\n        address authorized,\\n        AuthorizedAccount storage authAccount,\\n        Permission[] memory permissions\\n    ) private {\\n        for (uint i; i < permissions.length; ++i) {\\n            bool exists;\\n            for (uint j; j < authAccount.permissions.length; ++j) {\\n                AuthorizedPermission storage authPermission = authAccount.permissions[j];\\n                if (permissions[i] == authPermission.permission) {\\n                    exists = true;\\n                    authPermission.authorizedAt = block.number;\\n\\n                    // make sure unauthorizedAt is not greater than authorizedAt\\n                    // (refer to the comment in IAuthorizedAccount -> AuthorizedPermission struct)\\n                    if (authPermission.unauthorizedAt > authPermission.authorizedAt) {\\n                        authPermission.unauthorizedAt = authPermission.authorizedAt;\\n                    }\\n                    break;\\n                }\\n            }\\n            if (!exists) {\\n                authAccount.permissions.push(\\n                    AuthorizedPermission({\\n                        permission: permissions[i],\\n                        authorizedAt: block.number,\\n                        unauthorizedAt: 0\\n                    })\\n                );\\n            }\\n        }\\n\\n        emit PermissionsAdded(msg.sender, authorized, permissions);\\n    }\\n\\n    /**\\n     * @notice Removes permissions of specific authorized account.\\n     * - Removing permissions that don't exist in the Permission enum will return\\n     * with panic code 0x21 (convert a value that is too big or negative into an enum type).\\n     * - Removing duplicate/authorized permissions will update the permissions'\\n     * unauthorizedAt value.\\n     * This will revert if the account does not exist.\\n     * @param authorized The address of authorized account\\n     * @param permissions The list of permissions will be removed\\n     */\\n    function removePermissions(address authorized, Permission[] calldata permissions) external {\\n        if (authorized == address(0)) {\\n            revert AuthorizedAccountCannotBeZeroAddress();\\n        }\\n\\n        AuthorizedAccount[] storage authAccounts = authorizedAccounts[msg.sender];\\n        for (uint i; i < authAccounts.length; ++i) {\\n            if (authAccounts[i].account == authorized) {\\n                return _removePermissions(authorized, authAccounts[i], permissions);\\n            }\\n        }\\n\\n        revert AccountDoesNotExist();\\n    }\\n\\n    function _removePermissions(\\n        address authorized,\\n        AuthorizedAccount storage authAccount,\\n        Permission[] memory permissions\\n    ) private {\\n        for (uint i; i < permissions.length; ++i) {\\n            for (uint j; j < authAccount.permissions.length; ++j) {\\n                if (permissions[i] == authAccount.permissions[j].permission) {\\n                    // only update unauthorizedAt if the permission is authorized\\n                    if (\\n                        authAccount.permissions[j].authorizedAt >=\\n                        authAccount.permissions[j].unauthorizedAt\\n                    ) {\\n                        authAccount.permissions[j].unauthorizedAt = block.number + 1;\\n                    }\\n                    break;\\n                }\\n            }\\n        }\\n\\n        emit PermissionsRemoved(msg.sender, authorized, permissions);\\n    }\\n\\n    /**\\n     * @notice Validates permission of an authorized account associated with the main account.\\n     *\\n     * @param main The address of main account\\n     * @param authorized The address of authorized account\\n     * @param permission The permission needs to be verified with the authorized account\\n     * @param atBlock The block number to check if the permission is valid between\\n     * the permission's authorizedAt and unauthorizedAt period. It is added later to prevent\\n     * the timing attack. E.g. If the main account authorizes the PersonalSign permission at\\n     * block 1, creates a ticket at block 2, then unauthorizes the permission at block 3, the\\n     * ticket will be invalid and cannot be redeemed. To avoid this, the `atBlock` param is\\n     * needed to check if the permission is authorized between its authorizedAt and unauthorizedAt\\n     * duration.\\n     *\\n     * @return boolean value\\n     */\\n    function validatePermission(\\n        address main,\\n        address authorized,\\n        Permission permission,\\n        uint256 atBlock\\n    ) external view returns (bool) {\\n        if (main == address(0)) {\\n            revert MainAccountCannotBeZeroAddress();\\n        }\\n\\n        if (authorized == address(0)) {\\n            revert AuthorizedAccountCannotBeZeroAddress();\\n        }\\n\\n        if (atBlock == 0) {\\n            revert AtBlockNumberCannotBeZero();\\n        }\\n\\n        AuthorizedAccount[] storage authAccounts = authorizedAccounts[main];\\n\\n        for (uint i = 0; i < authAccounts.length; ++i) {\\n            if (authAccounts[i].account == authorized) {\\n                for (uint j = 0; j < authAccounts[i].permissions.length; ++j) {\\n                    if (authAccounts[i].permissions[j].permission == permission) {\\n                        uint256 authorizedAt = authAccounts[i].permissions[j].authorizedAt;\\n                        uint256 unauthorizedAt = authAccounts[i].permissions[j].unauthorizedAt;\\n\\n                        bool isPermissionUnauthorized = authorizedAt > 0 &&\\n                            authorizedAt < unauthorizedAt;\\n                        if (isPermissionUnauthorized) {\\n                            // the permission was previously valid, so we check that\\n                            // the `atBlock` is referencing a time when the permission was valid\\n                            return authorizedAt <= atBlock && atBlock < unauthorizedAt;\\n                        }\\n\\n                        // otherwise just check if the permission was authorized before the\\n                        // atBlock\\n                        return authorizedAt > 0 && authorizedAt <= atBlock;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Get all authorized accounts associated with a given account\\n     * @param main The address of main account\\n     * @return An array of authorized accounts\\n     */\\n    function getAuthorizedAccounts(\\n        address main\\n    ) external view returns (AuthorizedAccount[] memory) {\\n        if (main == address(0)) {\\n            revert MainAccountCannotBeZeroAddress();\\n        }\\n\\n        return authorizedAccounts[main];\\n    }\\n\\n    function getAllPermissions() internal pure returns (Permission[] memory) {\\n        Permission[] memory permissions = new Permission[](1);\\n        permissions[0] = Permission.PersonalSign;\\n        return permissions;\\n    }\\n\\n    /**\\n     * @notice Creates a proof for an authorized account. The prefix, suffix,\\n     * and infix strings allow applications to create more human-readable\\n     * messages for personal_sign requests.\\n     * @param account The authorized account\\n     * @param prefix String that is prefixed before the account address in the\\n     * signing message\\n     * @param suffix String that is placed after the expiry value in the signing\\n     * message\\n     * @param infixOne String that is placed between the address and expiry in\\n     * the signing message\\n     */\\n    function createAttachedAuthorizedAccountProofMessage(\\n        address account,\\n        uint256 expiry,\\n        string calldata prefix,\\n        string calldata suffix,\\n        string calldata infixOne\\n    ) external pure returns (bytes memory) {\\n        return\\n            _createAttachedAuthorizedAccountProofMessage(\\n                account,\\n                expiry,\\n                prefix,\\n                suffix,\\n                infixOne\\n            );\\n    }\\n\\n    function _createAttachedAuthorizedAccountProofMessage(\\n        address account,\\n        uint256 expiry,\\n        string calldata prefix,\\n        string calldata suffix,\\n        string calldata infixOne\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                prefix,\\n                Strings.toHexString(uint256(uint160(account)), 20),\\n                infixOne,\\n                Strings.toString((expiry)),\\n                suffix\\n            );\\n    }\\n\\n    function validateAttachedAuthorizedAccount(\\n        address main,\\n        AttachedAuthorizedAccount calldata account\\n    ) external view {\\n        if (block.timestamp > account.expiry) {\\n            revert AttachedAuthorizedAccountExpired();\\n        }\\n\\n        bytes memory proofMessage = _createAttachedAuthorizedAccountProofMessage(\\n            account.account,\\n            account.expiry,\\n            account.prefix,\\n            account.suffix,\\n            account.infixOne\\n        );\\n        bytes32 ethProof = ECDSA.toEthSignedMessageHash(proofMessage);\\n\\n        if (ECDSA.recover(ethProof, account.proof) != main) {\\n            revert AttachedAuthorizedAccountInvalidProof();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37105d0c76dccfd1e1c72546eeaed5f0aaead1fe47e280a60b8137be2baeadd9\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IAuthorizedAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\ninterface IAuthorizedAccounts {\\n    enum Permission {\\n        // PersonalSign permission allows the authorized account to\\n        // sign on behalf of the sending account.\\n        PersonalSign\\n    }\\n\\n    /**\\n     * @dev This type will hold the permission type and the block number from\\n     * which the permission was set to be authorized and unauthorized.\\n     * The permission is authorized when authorizedAt >= unauthorizedAt.\\n     *\\n     * Note: authorizedAt and unauthorizedAt won't be set to 0 when the permission\\n     * is updated, because they are both needed when validating the permission.\\n     */\\n    struct AuthorizedPermission {\\n        // Permission type\\n        Permission permission;\\n        // Block number from which the permission was set to be authorized.\\n        // If the transaction is called in block 1, the permission is\\n        // authorized from block 1 (authorizedAt = block.number).\\n        uint256 authorizedAt;\\n        // Block number from which the permission was set to be unauthorized.\\n        // If the transaction is called in block 1, the permission is\\n        // unauthorized from block 2 (unauthorizedAt = block.number + 1)\\n        // unauthorizedAt is set that way to avoid the case where the\\n        // permission is authorized and unauthorized in the same block:\\n        // E.g. addPermission is called => authorizedAt = 1\\n        //      removePermission is called => unauthorizedAt = 1\\n        // => We cannot tell if the permission is authorized or not.\\n        // E.g. addPermission is called => authorizedAt = 1\\n        //      removePermission is called => unauthorizedAt = 2\\n        //      addPermission is called => authorizedAt = 1 AND update unauthorizedAt = authorizedAt = 1\\n        // => The permission is authorized when authorizedAt >= unauthorizedAt\\n        uint256 unauthorizedAt;\\n    }\\n\\n    struct AuthorizedAccount {\\n        // The authorized account\\n        address account;\\n        // Block number at which the account was authorized.\\n        // If the transaction is called in block 1, the account is\\n        // authorized at block 1 (authorizedAt = block.number).\\n        // If the account is unauthorized, authorizedAt will be set to 0.\\n        uint256 authorizedAt;\\n        // Permission list\\n        AuthorizedPermission[] permissions;\\n    }\\n\\n    /**\\n     * @dev AttachedAuthorizedAccount represents a type of authorized account\\n     * that is intended to be supplied alongside each signature, as opposed\\n     * to the account being stored onchain.\\n     * This form of authorized account is only supported for receivers, so\\n     * a permission set field is not present. The struct includes a expiry,\\n     * and will no longer be valid when the current timestamp exceeds the expiry.\\n     */\\n    struct AttachedAuthorizedAccount {\\n        // The authorized account\\n        address account;\\n        // Unix timestamp when this authorized account is no longer valid.\\n        uint256 expiry;\\n        // Used to prove the authorization of this account.\\n        bytes proof;\\n        // The following strings are used when constructing the proof message.\\n        string prefix;\\n        string suffix;\\n        string infixOne;\\n    }\\n\\n    function authorizeAccount(address authorized, Permission[] calldata permissions) external;\\n\\n    function unauthorizeAccount(address authorized) external;\\n\\n    function addPermissions(address authorized, Permission[] calldata permissions) external;\\n\\n    function removePermissions(\\n        address authorized,\\n        Permission[] calldata permissionsToRemove\\n    ) external;\\n\\n    function validatePermission(\\n        address main,\\n        address authorized,\\n        Permission permission,\\n        uint256 atBlock\\n    ) external returns (bool);\\n\\n    function getAuthorizedAccounts(\\n        address main\\n    ) external view returns (AuthorizedAccount[] memory);\\n\\n    function createAttachedAuthorizedAccountProofMessage(\\n        address account,\\n        uint256 expiry,\\n        string calldata prefix,\\n        string calldata suffix,\\n        string calldata infixOne\\n    ) external pure returns (bytes memory);\\n\\n    function validateAttachedAuthorizedAccount(\\n        address main,\\n        AttachedAuthorizedAccount calldata account\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x0fde787f283ef21112a002778c8c0f754a2ef658a378189b852a8102986ba52b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611faa806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638129fc1c11610097578063b9cb203b11610066578063b9cb203b1461023b578063c346893b1461024e578063e30c397814610261578063f2fde38b1461027257600080fd5b80638129fc1c146101e85780638da5cb5b146101f057806395c4300b14610215578063b0b2a5751461022857600080fd5b80636f3201c9116100d35780636f3201c9146101a5578063715018a6146101b85780637408d09c146101c057806379ba5097146101e057600080fd5b806301ffc9a714610105578063229c86d41461013e5780633a856515146101535780634e21e32314610185575b600080fd5b610129610113366004611931565b6001600160e01b031916630a1f223760e21b1490565b60405190151581526020015b60405180910390f35b61015161014c366004611977565b610285565b005b6101666101613660046119fd565b61038f565b604080516001600160a01b039093168352602083019190915201610135565b610198610193366004611a69565b6103d5565b6040516101359190611b41565b6101516101b3366004611977565b6103f4565b6101516104dd565b6101d36101ce366004611b74565b6104f1565b6040516101359190611bc7565b610151610639565b6101516106b8565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610135565b610151610223366004611977565b6107c8565b610151610236366004611b74565b610975565b610151610249366004611c93565b610a5e565b61012961025c366004611ce8565b610b57565b6065546001600160a01b03166101fd565b610151610280366004611b74565b610dd6565b6001600160a01b0383166102ac5760405163055a500d60e51b815260040160405180910390fd5b336000908152609760205260408120905b815481101561037557846001600160a01b03168282815481106102e2576102e2611d39565b60009182526020909120600390910201546001600160a01b0316036103655761035e8583838154811061031757610317611d39565b9060005260206000209060030201868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610e4792505050565b5050505050565b61036e81611d65565b90506102bd565b5060405163e76ea87f60e01b815260040160405180910390fd5b609760205281600052604060002081815481106103ab57600080fd5b6000918252602090912060039091020180546001909101546001600160a01b039091169250905082565b60606103e78989898989898989611011565b9998505050505050505050565b6001600160a01b03831661041b5760405163055a500d60e51b815260040160405180910390fd5b336000908152609760205260408120905b815481101561037557846001600160a01b031682828154811061045157610451611d39565b60009182526020909120600390910201546001600160a01b0316036104cd5761035e8583838154811061048657610486611d39565b906000526020600020906003020186868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061106a92505050565b6104d681611d65565b905061042c565b6104e56111df565b6104ef6000611239565b565b60606001600160a01b03821661051a576040516359d55b9160e11b815260040160405180910390fd5b6001600160a01b038216600090815260976020908152604080832080548251818502810185019093528083529193909284015b8282101561062e5760008481526020808220604080516060810182526003870290920180546001600160a01b0316835260018101548385015260028101805483518187028101870185528181529496929593870194939192909184015b82821015610617576000848152602090206040805160608101909152600384029091018054829060ff1680156105e2576105e2611b8f565b80156105f0576105f0611b8f565b815260200160018201548152602001600282015481525050815260200190600101906105aa565b50505050815250508152602001906001019061054d565b505050509050919050565b60655433906001600160a01b031681146106ac5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b6106b581611239565b50565b600054610100900460ff16158080156106d85750600054600160ff909116105b806106f25750303b1580156106f2575060005460ff166001145b6107555760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106a3565b6000805460ff191660011790558015610778576000805461ff0019166101001790555b610780611252565b80156106b5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6001600160a01b0383166107ef5760405163055a500d60e51b815260040160405180910390fd5b336000908152609760205260408120905b81548110156108d657846001600160a01b031682828154811061082557610825611d39565b60009182526020909120600390910201546001600160a01b0316036108c65781818154811061085657610856611d39565b9060005260206000209060030201600101546000146108885760405163174191c160e11b815260040160405180910390fd5b4382828154811061089b5761089b611d39565b90600052602060002090600302016001018190555061035e8583838154811061031757610317611d39565b6108cf81611d65565b9050610800565b508054600190810180835560008381529183916108f39190611d7e565b8154811061090357610903611d39565b60009182526020918290206003919091020180546001600160a01b0319166001600160a01b03881617815543600182015560408051868402808201850190925286815291935061035e9288928592909189918991829190850190849080828437600092019190915250610e4792505050565b6001600160a01b03811661099c5760405163055a500d60e51b815260040160405180910390fd5b336000908152609760205260408120905b815481101561037557826001600160a01b03168282815481106109d2576109d2611d39565b60009182526020909120600390910201546001600160a01b031603610a4e57818181548110610a0357610a03611d39565b906000526020600020906003020160010160009055610a4983838381548110610a2e57610a2e611d39565b9060005260206000209060030201610a44611281565b61106a565b505050565b610a5781611d65565b90506109ad565b8060200135421115610a835760405163f7a9d8d760e01b815260040160405180910390fd5b6000610ac6610a956020840184611b74565b6020840135610aa76060860186611d91565b610ab46080880188611d91565b610ac160a08a018a611d91565b611011565b90506000610ad3826112ed565b90506001600160a01b038416610b2a82610af06040870187611d91565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061132892505050565b6001600160a01b031614610b515760405163926e595960e01b815260040160405180910390fd5b50505050565b60006001600160a01b038516610b80576040516359d55b9160e11b815260040160405180910390fd5b6001600160a01b038416610ba75760405163055a500d60e51b815260040160405180910390fd5b81600003610bc85760405163a5d0c24760e01b815260040160405180910390fd5b6001600160a01b0385166000908152609760205260408120905b8154811015610dc757856001600160a01b0316828281548110610c0757610c07611d39565b60009182526020909120600390910201546001600160a01b031603610db75760005b828281548110610c3b57610c3b611d39565b906000526020600020906003020160020180549050811015610db557858015610c6657610c66611b8f565b838381548110610c7857610c78611d39565b90600052602060002090600302016002018281548110610c9a57610c9a611d39565b600091825260209091206003909102015460ff168015610cbc57610cbc611b8f565b03610da5576000838381548110610cd557610cd5611d39565b90600052602060002090600302016002018281548110610cf757610cf7611d39565b90600052602060002090600302016001015490506000848481548110610d1f57610d1f611d39565b90600052602060002090600302016002018381548110610d4157610d41611d39565b906000526020600020906003020160020154905060008083118015610d6557508183105b90508015610d8957878311158015610d7c57508188105b9650505050505050610dce565b600083118015610d7c5750878311159650505050505050610dce565b610dae81611d65565b9050610c29565b505b610dc081611d65565b9050610be2565b5060009150505b949350505050565b610dde6111df565b606580546001600160a01b0383166001600160a01b03199091168117909155610e0f6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60005b8151811015610fc0576000805b6002850154811015610f09576000856002018281548110610e7a57610e7a611d39565b60009182526020909120600390910201805490915060ff168015610ea057610ea0611b8f565b858581518110610eb257610eb2611d39565b60200260200101516000811115610ecb57610ecb611b8f565b03610ef85743600182810182905560028301549094501115610ef257600181015460028201555b50610f09565b50610f0281611d65565b9050610e57565b5080610faf57836002016040518060600160405280858581518110610f3057610f30611d39565b60200260200101516000811115610f4957610f49611b8f565b8152436020808301919091526000604090920182905283546001818101865594835291208251600390920201805492939092839160ff1990911690838015610f9357610f93611b8f565b0217905550602082015181600101556040820151816002015550505b50610fb981611d65565b9050610e4a565b50826001600160a01b0316336001600160a01b03167f1a8c453bd4f4c60416befb32fbbae6c3feb80694214263b26e60888e4bbb58c8836040516110049190611dd8565b60405180910390a3505050565b606086866110298b6001600160a01b0316601461134e565b85856110348d6114f1565b8a8a60405160200161104d989796959493929190611e23565b604051602081830303815290604052905098975050505050505050565b60005b815181101561119b5760005b600284015481101561118a5783600201818154811061109a5761109a611d39565b600091825260209091206003909102015460ff1680156110bc576110bc611b8f565b8383815181106110ce576110ce611d39565b602002602001015160008111156110e7576110e7611b8f565b0361117a5783600201818154811061110157611101611d39565b90600052602060002090600302016002015484600201828154811061112857611128611d39565b906000526020600020906003020160010154106111755761114a436001611e77565b84600201828154811061115f5761115f611d39565b9060005260206000209060030201600201819055505b61118a565b61118381611d65565b9050611079565b5061119481611d65565b905061106d565b50826001600160a01b0316336001600160a01b03167f91a6ec4bca1e3b215c3597813fbbd8a0b7348750ffc7e57e0891754c8338f690836040516110049190611dd8565b6033546001600160a01b031633146104ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106a3565b606580546001600160a01b03191690556106b581611584565b600054610100900460ff166112795760405162461bcd60e51b81526004016106a390611e8a565b6104ef6115d6565b60408051600180825281830190925260609160009190602080830190803683370190505090506000816000815181106112bc576112bc611d39565b602002602001019060008111156112d5576112d5611b8f565b908180156112e5576112e5611b8f565b905250919050565b60006112f982516114f1565b8260405160200161130b929190611eeb565b604051602081830303815290604052805190602001209050919050565b60008060006113378585611606565b915091506113448161164b565b5090505b92915050565b6060600061135d836002611f46565b611368906002611e77565b67ffffffffffffffff81111561138057611380611ed5565b6040519080825280601f01601f1916602001820160405280156113aa576020820181803683370190505b509050600360fc1b816000815181106113c5576113c5611d39565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106113f4576113f4611d39565b60200101906001600160f81b031916908160001a9053506000611418846002611f46565b611423906001611e77565b90505b600181111561149b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061145757611457611d39565b1a60f81b82828151811061146d5761146d611d39565b60200101906001600160f81b031916908160001a90535060049490941c9361149481611f5d565b9050611426565b5083156114ea5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106a3565b9392505050565b606060006114fe83611795565b600101905060008167ffffffffffffffff81111561151e5761151e611ed5565b6040519080825280601f01601f191660200182016040528015611548576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461155257509392505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166115fd5760405162461bcd60e51b81526004016106a390611e8a565b6104ef33611239565b600080825160410361163c5760208301516040840151606085015160001a6116308782858561186d565b94509450505050611644565b506000905060025b9250929050565b600081600481111561165f5761165f611b8f565b036116675750565b600181600481111561167b5761167b611b8f565b036116c85760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106a3565b60028160048111156116dc576116dc611b8f565b036117295760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106a3565b600381600481111561173d5761173d611b8f565b036106b55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106a3565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106117d45772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611800576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061181e57662386f26fc10000830492506010015b6305f5e1008310611836576305f5e100830492506008015b612710831061184a57612710830492506004015b6064831061185c576064830492506002015b600a83106113485760010192915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156118a45750600090506003611928565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156118f8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661192157600060019250925050611928565b9150600090505b94509492505050565b60006020828403121561194357600080fd5b81356001600160e01b0319811681146114ea57600080fd5b80356001600160a01b038116811461197257600080fd5b919050565b60008060006040848603121561198c57600080fd5b6119958461195b565b9250602084013567ffffffffffffffff808211156119b257600080fd5b818601915086601f8301126119c657600080fd5b8135818111156119d557600080fd5b8760208260051b85010111156119ea57600080fd5b6020830194508093505050509250925092565b60008060408385031215611a1057600080fd5b611a198361195b565b946020939093013593505050565b60008083601f840112611a3957600080fd5b50813567ffffffffffffffff811115611a5157600080fd5b60208301915083602082850101111561164457600080fd5b60008060008060008060008060a0898b031215611a8557600080fd5b611a8e8961195b565b975060208901359650604089013567ffffffffffffffff80821115611ab257600080fd5b611abe8c838d01611a27565b909850965060608b0135915080821115611ad757600080fd5b611ae38c838d01611a27565b909650945060808b0135915080821115611afc57600080fd5b50611b098b828c01611a27565b999c989b5096995094979396929594505050565b60005b83811015611b38578181015183820152602001611b20565b50506000910152565b6020815260008251806020840152611b60816040850160208701611b1d565b601f01601f19169190910160400192915050565b600060208284031215611b8657600080fd5b6114ea8261195b565b634e487b7160e01b600052602160045260246000fd5b60018110611bc357634e487b7160e01b600052602160045260246000fd5b9052565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611c8457898403603f19018652825180516001600160a01b03168552888101518986015287015160608886018190528151818701819052918a0191849060808801905b80831015611c6e578451611c4b838251611ba5565b808e0151838f01528c01518c830152938c01936001929092019190830190611c36565b50988b0198965050509288019250600101611bef565b50919998505050505050505050565b60008060408385031215611ca657600080fd5b611caf8361195b565b9150602083013567ffffffffffffffff811115611ccb57600080fd5b830160c08186031215611cdd57600080fd5b809150509250929050565b60008060008060808587031215611cfe57600080fd5b611d078561195b565b9350611d156020860161195b565b9250604085013560018110611d2957600080fd5b9396929550929360600135925050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611d7757611d77611d4f565b5060010190565b8181038181111561134857611348611d4f565b6000808335601e19843603018112611da857600080fd5b83018035915067ffffffffffffffff821115611dc357600080fd5b60200191503681900382131561164457600080fd5b6020808252825182820181905260009190848201906040850190845b81811015611e1757611e07838551611ba5565b9284019291840191600101611df4565b50909695505050505050565b878982376000888201600081528851611e40818360208d01611b1d565b018688823760009087019081528551611e5d818360208a01611b1d565b018385823760009301928352509098975050505050505050565b8082018082111561134857611348611d4f565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000815260008351611f2381601a850160208801611b1d565b835190830190611f3a81601a840160208801611b1d565b01601a01949350505050565b808202811582820484141761134857611348611d4f565b600081611f6c57611f6c611d4f565b50600019019056fea2646970667358221220ada4565c7d92ed1fc7bf9db11624327709731db88488ff9400fe1e849962e41564736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638129fc1c11610097578063b9cb203b11610066578063b9cb203b1461023b578063c346893b1461024e578063e30c397814610261578063f2fde38b1461027257600080fd5b80638129fc1c146101e85780638da5cb5b146101f057806395c4300b14610215578063b0b2a5751461022857600080fd5b80636f3201c9116100d35780636f3201c9146101a5578063715018a6146101b85780637408d09c146101c057806379ba5097146101e057600080fd5b806301ffc9a714610105578063229c86d41461013e5780633a856515146101535780634e21e32314610185575b600080fd5b610129610113366004611931565b6001600160e01b031916630a1f223760e21b1490565b60405190151581526020015b60405180910390f35b61015161014c366004611977565b610285565b005b6101666101613660046119fd565b61038f565b604080516001600160a01b039093168352602083019190915201610135565b610198610193366004611a69565b6103d5565b6040516101359190611b41565b6101516101b3366004611977565b6103f4565b6101516104dd565b6101d36101ce366004611b74565b6104f1565b6040516101359190611bc7565b610151610639565b6101516106b8565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610135565b610151610223366004611977565b6107c8565b610151610236366004611b74565b610975565b610151610249366004611c93565b610a5e565b61012961025c366004611ce8565b610b57565b6065546001600160a01b03166101fd565b610151610280366004611b74565b610dd6565b6001600160a01b0383166102ac5760405163055a500d60e51b815260040160405180910390fd5b336000908152609760205260408120905b815481101561037557846001600160a01b03168282815481106102e2576102e2611d39565b60009182526020909120600390910201546001600160a01b0316036103655761035e8583838154811061031757610317611d39565b9060005260206000209060030201868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610e4792505050565b5050505050565b61036e81611d65565b90506102bd565b5060405163e76ea87f60e01b815260040160405180910390fd5b609760205281600052604060002081815481106103ab57600080fd5b6000918252602090912060039091020180546001909101546001600160a01b039091169250905082565b60606103e78989898989898989611011565b9998505050505050505050565b6001600160a01b03831661041b5760405163055a500d60e51b815260040160405180910390fd5b336000908152609760205260408120905b815481101561037557846001600160a01b031682828154811061045157610451611d39565b60009182526020909120600390910201546001600160a01b0316036104cd5761035e8583838154811061048657610486611d39565b906000526020600020906003020186868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061106a92505050565b6104d681611d65565b905061042c565b6104e56111df565b6104ef6000611239565b565b60606001600160a01b03821661051a576040516359d55b9160e11b815260040160405180910390fd5b6001600160a01b038216600090815260976020908152604080832080548251818502810185019093528083529193909284015b8282101561062e5760008481526020808220604080516060810182526003870290920180546001600160a01b0316835260018101548385015260028101805483518187028101870185528181529496929593870194939192909184015b82821015610617576000848152602090206040805160608101909152600384029091018054829060ff1680156105e2576105e2611b8f565b80156105f0576105f0611b8f565b815260200160018201548152602001600282015481525050815260200190600101906105aa565b50505050815250508152602001906001019061054d565b505050509050919050565b60655433906001600160a01b031681146106ac5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b6106b581611239565b50565b600054610100900460ff16158080156106d85750600054600160ff909116105b806106f25750303b1580156106f2575060005460ff166001145b6107555760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106a3565b6000805460ff191660011790558015610778576000805461ff0019166101001790555b610780611252565b80156106b5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6001600160a01b0383166107ef5760405163055a500d60e51b815260040160405180910390fd5b336000908152609760205260408120905b81548110156108d657846001600160a01b031682828154811061082557610825611d39565b60009182526020909120600390910201546001600160a01b0316036108c65781818154811061085657610856611d39565b9060005260206000209060030201600101546000146108885760405163174191c160e11b815260040160405180910390fd5b4382828154811061089b5761089b611d39565b90600052602060002090600302016001018190555061035e8583838154811061031757610317611d39565b6108cf81611d65565b9050610800565b508054600190810180835560008381529183916108f39190611d7e565b8154811061090357610903611d39565b60009182526020918290206003919091020180546001600160a01b0319166001600160a01b03881617815543600182015560408051868402808201850190925286815291935061035e9288928592909189918991829190850190849080828437600092019190915250610e4792505050565b6001600160a01b03811661099c5760405163055a500d60e51b815260040160405180910390fd5b336000908152609760205260408120905b815481101561037557826001600160a01b03168282815481106109d2576109d2611d39565b60009182526020909120600390910201546001600160a01b031603610a4e57818181548110610a0357610a03611d39565b906000526020600020906003020160010160009055610a4983838381548110610a2e57610a2e611d39565b9060005260206000209060030201610a44611281565b61106a565b505050565b610a5781611d65565b90506109ad565b8060200135421115610a835760405163f7a9d8d760e01b815260040160405180910390fd5b6000610ac6610a956020840184611b74565b6020840135610aa76060860186611d91565b610ab46080880188611d91565b610ac160a08a018a611d91565b611011565b90506000610ad3826112ed565b90506001600160a01b038416610b2a82610af06040870187611d91565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061132892505050565b6001600160a01b031614610b515760405163926e595960e01b815260040160405180910390fd5b50505050565b60006001600160a01b038516610b80576040516359d55b9160e11b815260040160405180910390fd5b6001600160a01b038416610ba75760405163055a500d60e51b815260040160405180910390fd5b81600003610bc85760405163a5d0c24760e01b815260040160405180910390fd5b6001600160a01b0385166000908152609760205260408120905b8154811015610dc757856001600160a01b0316828281548110610c0757610c07611d39565b60009182526020909120600390910201546001600160a01b031603610db75760005b828281548110610c3b57610c3b611d39565b906000526020600020906003020160020180549050811015610db557858015610c6657610c66611b8f565b838381548110610c7857610c78611d39565b90600052602060002090600302016002018281548110610c9a57610c9a611d39565b600091825260209091206003909102015460ff168015610cbc57610cbc611b8f565b03610da5576000838381548110610cd557610cd5611d39565b90600052602060002090600302016002018281548110610cf757610cf7611d39565b90600052602060002090600302016001015490506000848481548110610d1f57610d1f611d39565b90600052602060002090600302016002018381548110610d4157610d41611d39565b906000526020600020906003020160020154905060008083118015610d6557508183105b90508015610d8957878311158015610d7c57508188105b9650505050505050610dce565b600083118015610d7c5750878311159650505050505050610dce565b610dae81611d65565b9050610c29565b505b610dc081611d65565b9050610be2565b5060009150505b949350505050565b610dde6111df565b606580546001600160a01b0383166001600160a01b03199091168117909155610e0f6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60005b8151811015610fc0576000805b6002850154811015610f09576000856002018281548110610e7a57610e7a611d39565b60009182526020909120600390910201805490915060ff168015610ea057610ea0611b8f565b858581518110610eb257610eb2611d39565b60200260200101516000811115610ecb57610ecb611b8f565b03610ef85743600182810182905560028301549094501115610ef257600181015460028201555b50610f09565b50610f0281611d65565b9050610e57565b5080610faf57836002016040518060600160405280858581518110610f3057610f30611d39565b60200260200101516000811115610f4957610f49611b8f565b8152436020808301919091526000604090920182905283546001818101865594835291208251600390920201805492939092839160ff1990911690838015610f9357610f93611b8f565b0217905550602082015181600101556040820151816002015550505b50610fb981611d65565b9050610e4a565b50826001600160a01b0316336001600160a01b03167f1a8c453bd4f4c60416befb32fbbae6c3feb80694214263b26e60888e4bbb58c8836040516110049190611dd8565b60405180910390a3505050565b606086866110298b6001600160a01b0316601461134e565b85856110348d6114f1565b8a8a60405160200161104d989796959493929190611e23565b604051602081830303815290604052905098975050505050505050565b60005b815181101561119b5760005b600284015481101561118a5783600201818154811061109a5761109a611d39565b600091825260209091206003909102015460ff1680156110bc576110bc611b8f565b8383815181106110ce576110ce611d39565b602002602001015160008111156110e7576110e7611b8f565b0361117a5783600201818154811061110157611101611d39565b90600052602060002090600302016002015484600201828154811061112857611128611d39565b906000526020600020906003020160010154106111755761114a436001611e77565b84600201828154811061115f5761115f611d39565b9060005260206000209060030201600201819055505b61118a565b61118381611d65565b9050611079565b5061119481611d65565b905061106d565b50826001600160a01b0316336001600160a01b03167f91a6ec4bca1e3b215c3597813fbbd8a0b7348750ffc7e57e0891754c8338f690836040516110049190611dd8565b6033546001600160a01b031633146104ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106a3565b606580546001600160a01b03191690556106b581611584565b600054610100900460ff166112795760405162461bcd60e51b81526004016106a390611e8a565b6104ef6115d6565b60408051600180825281830190925260609160009190602080830190803683370190505090506000816000815181106112bc576112bc611d39565b602002602001019060008111156112d5576112d5611b8f565b908180156112e5576112e5611b8f565b905250919050565b60006112f982516114f1565b8260405160200161130b929190611eeb565b604051602081830303815290604052805190602001209050919050565b60008060006113378585611606565b915091506113448161164b565b5090505b92915050565b6060600061135d836002611f46565b611368906002611e77565b67ffffffffffffffff81111561138057611380611ed5565b6040519080825280601f01601f1916602001820160405280156113aa576020820181803683370190505b509050600360fc1b816000815181106113c5576113c5611d39565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106113f4576113f4611d39565b60200101906001600160f81b031916908160001a9053506000611418846002611f46565b611423906001611e77565b90505b600181111561149b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061145757611457611d39565b1a60f81b82828151811061146d5761146d611d39565b60200101906001600160f81b031916908160001a90535060049490941c9361149481611f5d565b9050611426565b5083156114ea5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106a3565b9392505050565b606060006114fe83611795565b600101905060008167ffffffffffffffff81111561151e5761151e611ed5565b6040519080825280601f01601f191660200182016040528015611548576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461155257509392505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166115fd5760405162461bcd60e51b81526004016106a390611e8a565b6104ef33611239565b600080825160410361163c5760208301516040840151606085015160001a6116308782858561186d565b94509450505050611644565b506000905060025b9250929050565b600081600481111561165f5761165f611b8f565b036116675750565b600181600481111561167b5761167b611b8f565b036116c85760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106a3565b60028160048111156116dc576116dc611b8f565b036117295760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106a3565b600381600481111561173d5761173d611b8f565b036106b55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106a3565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106117d45772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611800576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061181e57662386f26fc10000830492506010015b6305f5e1008310611836576305f5e100830492506008015b612710831061184a57612710830492506004015b6064831061185c576064830492506002015b600a83106113485760010192915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156118a45750600090506003611928565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156118f8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661192157600060019250925050611928565b9150600090505b94509492505050565b60006020828403121561194357600080fd5b81356001600160e01b0319811681146114ea57600080fd5b80356001600160a01b038116811461197257600080fd5b919050565b60008060006040848603121561198c57600080fd5b6119958461195b565b9250602084013567ffffffffffffffff808211156119b257600080fd5b818601915086601f8301126119c657600080fd5b8135818111156119d557600080fd5b8760208260051b85010111156119ea57600080fd5b6020830194508093505050509250925092565b60008060408385031215611a1057600080fd5b611a198361195b565b946020939093013593505050565b60008083601f840112611a3957600080fd5b50813567ffffffffffffffff811115611a5157600080fd5b60208301915083602082850101111561164457600080fd5b60008060008060008060008060a0898b031215611a8557600080fd5b611a8e8961195b565b975060208901359650604089013567ffffffffffffffff80821115611ab257600080fd5b611abe8c838d01611a27565b909850965060608b0135915080821115611ad757600080fd5b611ae38c838d01611a27565b909650945060808b0135915080821115611afc57600080fd5b50611b098b828c01611a27565b999c989b5096995094979396929594505050565b60005b83811015611b38578181015183820152602001611b20565b50506000910152565b6020815260008251806020840152611b60816040850160208701611b1d565b601f01601f19169190910160400192915050565b600060208284031215611b8657600080fd5b6114ea8261195b565b634e487b7160e01b600052602160045260246000fd5b60018110611bc357634e487b7160e01b600052602160045260246000fd5b9052565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611c8457898403603f19018652825180516001600160a01b03168552888101518986015287015160608886018190528151818701819052918a0191849060808801905b80831015611c6e578451611c4b838251611ba5565b808e0151838f01528c01518c830152938c01936001929092019190830190611c36565b50988b0198965050509288019250600101611bef565b50919998505050505050505050565b60008060408385031215611ca657600080fd5b611caf8361195b565b9150602083013567ffffffffffffffff811115611ccb57600080fd5b830160c08186031215611cdd57600080fd5b809150509250929050565b60008060008060808587031215611cfe57600080fd5b611d078561195b565b9350611d156020860161195b565b9250604085013560018110611d2957600080fd5b9396929550929360600135925050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611d7757611d77611d4f565b5060010190565b8181038181111561134857611348611d4f565b6000808335601e19843603018112611da857600080fd5b83018035915067ffffffffffffffff821115611dc357600080fd5b60200191503681900382131561164457600080fd5b6020808252825182820181905260009190848201906040850190845b81811015611e1757611e07838551611ba5565b9284019291840191600101611df4565b50909695505050505050565b878982376000888201600081528851611e40818360208d01611b1d565b018688823760009087019081528551611e5d818360208a01611b1d565b018385823760009301928352509098975050505050505050565b8082018082111561134857611348611d4f565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000815260008351611f2381601a850160208801611b1d565b835190830190611f3a81601a840160208801611b1d565b01601a01949350505050565b808202811582820484141761134857611348611d4f565b600081611f6c57611f6c611d4f565b50600019019056fea2646970667358221220ada4565c7d92ed1fc7bf9db11624327709731db88488ff9400fe1e849962e41564736f6c63430008120033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addPermissions(address,uint8[])": {
        "params": {
          "authorized": "The authorized account address",
          "permissions": "The new permissions will be added to the authorized account"
        }
      },
      "authorizeAccount(address,uint8[])": {
        "params": {
          "authorized": "The address that the main account wants to authorize",
          "permissions": "The list of permissions that the authorized account can perform within the Sylo network."
        }
      },
      "createAttachedAuthorizedAccountProofMessage(address,uint256,string,string,string)": {
        "params": {
          "account": "The authorized account",
          "infixOne": "String that is placed between the address and expiry in the signing message",
          "prefix": "String that is prefixed before the account address in the signing message",
          "suffix": "String that is placed after the expiry value in the signing message"
        }
      },
      "getAuthorizedAccounts(address)": {
        "params": {
          "main": "The address of main account"
        },
        "returns": {
          "_0": "An array of authorized accounts"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "removePermissions(address,uint8[])": {
        "params": {
          "authorized": "The address of authorized account",
          "permissions": "The list of permissions will be removed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unauthorizeAccount(address)": {
        "params": {
          "authorized": "The address of the authorized account"
        }
      },
      "validatePermission(address,address,uint8,uint256)": {
        "params": {
          "atBlock": "The block number to check if the permission is valid between the permission's authorizedAt and unauthorizedAt period. It is added later to prevent the timing attack. E.g. If the main account authorizes the PersonalSign permission at block 1, creates a ticket at block 2, then unauthorizes the permission at block 3, the ticket will be invalid and cannot be redeemed. To avoid this, the `atBlock` param is needed to check if the permission is authorized between its authorizedAt and unauthorizedAt duration.",
          "authorized": "The address of authorized account",
          "main": "The address of main account",
          "permission": "The permission needs to be verified with the authorized account"
        },
        "returns": {
          "_0": "boolean value"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPermissions(address,uint8[])": {
        "notice": "Adds new permissions to a specific authorized account. - Adding permissions that don't exist in the Permission enum will return with panic code 0x21 (convert a value that is too big or negative into an enum type). - Adding duplicate permissions will update the permissions' authorizedAt value. - Adding permissions that were previously unauthorized will update the authorizedAt and unauthorizedAt values (refer to the comment in IAuthorizedAccount -> AuthorizedPermission struct). This will revert if the account does not exist."
      },
      "authorizeAccount(address,uint8[])": {
        "notice": "Adds new authorized accounts with certain permissions. This will revert if the account has already existed."
      },
      "authorizedAccounts(address,uint256)": {
        "notice": "Tracks authorized accounts for every main account"
      },
      "createAttachedAuthorizedAccountProofMessage(address,uint256,string,string,string)": {
        "notice": "Creates a proof for an authorized account. The prefix, suffix, and infix strings allow applications to create more human-readable messages for personal_sign requests."
      },
      "getAuthorizedAccounts(address)": {
        "notice": "Get all authorized accounts associated with a given account"
      },
      "removePermissions(address,uint8[])": {
        "notice": "Removes permissions of specific authorized account. - Removing permissions that don't exist in the Permission enum will return with panic code 0x21 (convert a value that is too big or negative into an enum type). - Removing duplicate/authorized permissions will update the permissions' unauthorizedAt value. This will revert if the account does not exist."
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns true if the contract implements the interface defined by `interfaceId` from ERC165."
      },
      "unauthorizeAccount(address)": {
        "notice": "Removes all permissions of a specific authorized account associated with the msg.sender, and sets the account's authorizedAt to 0. Note: It does not remove the authorized account from the list. This will revert if the account does not exist."
      },
      "validatePermission(address,address,uint8,uint256)": {
        "notice": "Validates permission of an authorized account associated with the main account."
      }
    },
    "notice": "Manages authorized accounts with limited permissions on behalf of main account these authorized accounts are allowed to perform some certain actions in the Sylo network in order to reduce the works for main account",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/AuthorizedAccounts.sol:AuthorizedAccounts",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 247,
        "contract": "contracts/AuthorizedAccounts.sol:AuthorizedAccounts",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 777,
        "contract": "contracts/AuthorizedAccounts.sol:AuthorizedAccounts",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/AuthorizedAccounts.sol:AuthorizedAccounts",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/AuthorizedAccounts.sol:AuthorizedAccounts",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/AuthorizedAccounts.sol:AuthorizedAccounts",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/AuthorizedAccounts.sol:AuthorizedAccounts",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9300,
        "contract": "contracts/AuthorizedAccounts.sol:AuthorizedAccounts",
        "label": "authorizedAccounts",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_array(t_struct(AuthorizedAccount)11580_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(AuthorizedAccount)11580_storage)dyn_storage": {
        "base": "t_struct(AuthorizedAccount)11580_storage",
        "encoding": "dynamic_array",
        "label": "struct IAuthorizedAccounts.AuthorizedAccount[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AuthorizedPermission)11571_storage)dyn_storage": {
        "base": "t_struct(AuthorizedPermission)11571_storage",
        "encoding": "dynamic_array",
        "label": "struct IAuthorizedAccounts.AuthorizedPermission[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Permission)11563": {
        "encoding": "inplace",
        "label": "enum IAuthorizedAccounts.Permission",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(AuthorizedAccount)11580_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IAuthorizedAccounts.AuthorizedAccount[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(AuthorizedAccount)11580_storage)dyn_storage"
      },
      "t_struct(AuthorizedAccount)11580_storage": {
        "encoding": "inplace",
        "label": "struct IAuthorizedAccounts.AuthorizedAccount",
        "members": [
          {
            "astId": 11573,
            "contract": "contracts/AuthorizedAccounts.sol:AuthorizedAccounts",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11575,
            "contract": "contracts/AuthorizedAccounts.sol:AuthorizedAccounts",
            "label": "authorizedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11579,
            "contract": "contracts/AuthorizedAccounts.sol:AuthorizedAccounts",
            "label": "permissions",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(AuthorizedPermission)11571_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(AuthorizedPermission)11571_storage": {
        "encoding": "inplace",
        "label": "struct IAuthorizedAccounts.AuthorizedPermission",
        "members": [
          {
            "astId": 11566,
            "contract": "contracts/AuthorizedAccounts.sol:AuthorizedAccounts",
            "label": "permission",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Permission)11563"
          },
          {
            "astId": 11568,
            "contract": "contracts/AuthorizedAccounts.sol:AuthorizedAccounts",
            "label": "authorizedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11570,
            "contract": "contracts/AuthorizedAccounts.sol:AuthorizedAccounts",
            "label": "unauthorizedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}